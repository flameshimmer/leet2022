		/**
		 * Definition for a binary tree node.
		 * struct TreeNode {
		 *     int val;
		 *     TreeNode *left;
		 *     TreeNode *right;
		 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
		 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
		 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
		 * };
		 */
		string helper(TreeNode* root, unordered_map<string, int>& map, vector<TreeNode*>& result) {
			if (!root) { return ""; }

			string s = to_string(root->val) + "[" + helper(root->left, map, result) + " " + helper(root->right, map, result) + "]";
			map[s]++;
			if (map[s] == 2) { result.push_back(root); }
			return s;
		}


		vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
			unordered_map<string, int> map;
			vector<TreeNode*> result;
			helper(root, map, result);
			return result;
		}