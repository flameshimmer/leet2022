		int helper(int i, int n, int j, int m, vector<int>& nums, vector<int>& multipliers, vector<vector<int>>& M) {
			if (i + (nums.size() - n) == m) { return 0; } // taken start count + taken end count is equal to m, then we are good
			if (M[i][j] != INT_MIN) { return M[i][j]; }

			int ifTakeLeft = helper(i + 1, n, j + 1, m, nums, multipliers, M) + nums[i] * multipliers[j];
			int ifTakeRight = helper(i, n - 1, j + 1, m, nums, multipliers, M) + nums[n - 1] * multipliers[j];
			M[i][j] = max(ifTakeLeft, ifTakeRight);
			return M[i][j];
		}

		int maximumScore(vector<int>& nums, vector<int>& multipliers) {
			int n = nums.size();
			int m = multipliers.size();
			vector<vector<int>> M(m + 1, vector<int>(m + 1, INT_MIN));
			return helper(0, n, 0, m, nums, multipliers, M);
		}