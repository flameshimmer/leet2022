{"title":"631. Design Excel Sum Formula","description":"Design the basic function of Excel and implement the function of the sum formula.\n\nImplement the Excel class:\n\nExcel(int height, char width) Initializes the object with the height and the width of the sheet. The sheet is an integer matrix mat of size height x width with the row index in the range [1, height] and the column index in the range ['A', width]. All the values should be zero initially.\nvoid set(int row, char column, int val) Changes the value at mat[row][column] to be val.\nint get(int row, char column) Returns the value at mat[row][column].\nint sum(int row, char column, List<String> numbers) Sets the value at mat[row][column] to be the sum of cells represented by numbers and returns the value at mat[row][column]. This sum formula should exist until this cell is overlapped by another value or another sum formula. numbers[i] could be on the format:\n\"ColRow\" that represents a single cell.\nFor example, \"F7\" represents the cell mat[7]['F'].\n\"ColRow1:ColRow2\" that represents a range of cells. The range will always be a rectangle where \"ColRow1\" represent the position of the top-left cell, and \"ColRow2\" represents the position of the bottom-right cell.\nFor example, \"B3:F7\" represents the cells mat[i][j] for 3 <= i <= 7 and 'B' <= j <= 'F'.\n\nNote: You could assume that there will not be any circular sum reference.\n\nFor example, mat[1]['A'] == sum(1, \"B\") and mat[1]['B'] == sum(1, \"A\").\n\n \n\nExample 1:\n\nInput\n[\"Excel\", \"set\", \"sum\", \"set\", \"get\"]\n[[3, \"C\"], [1, \"A\", 2], [3, \"C\", [\"A1\", \"A1:B2\"]], [2, \"B\", 2], [3, \"C\"]]\nOutput\n[null, null, 4, null, 6]\n\nExplanation\nExcel excel = new Excel(3, \"C\");\n // construct a 3*3 2D array with all zero.\n //   A B C\n // 1 0 0 0\n // 2 0 0 0\n // 3 0 0 0\nexcel.set(1, \"A\", 2);\n // set mat[1][\"A\"] to be 2.\n //   A B C\n // 1 2 0 0\n // 2 0 0 0\n // 3 0 0 0\nexcel.sum(3, \"C\", [\"A1\", \"A1:B2\"]); // return 4\n // set mat[3][\"C\"] to be the sum of value at mat[1][\"A\"] and the values sum of the rectangle range whose top-left cell is mat[1][\"A\"] and bottom-right cell is mat[2][\"B\"].\n //   A B C\n // 1 2 0 0\n // 2 0 0 0\n // 3 0 0 4\nexcel.set(2, \"B\", 2);\n // set mat[2][\"B\"] to be 2. Note mat[3][\"C\"] should also be changed.\n //   A B C\n // 1 2 0 0\n // 2 0 2 0\n // 3 0 0 6\nexcel.get(3, \"C\"); // return 6\n\n\n \n\nConstraints:\n\n1 <= height <= 26\n'A' <= width <= 'Z'\n1 <= row <= height\n'A' <= column <= width\n-100 <= val <= 100\n1 <= numbers.length <= 5\nnumbers[i] has the format \"ColRow\" or \"ColRow1:ColRow2\".\nAt most 100 calls will be made to set, get, and sum.","functionSig":"1\nclass Excel {\n2\npublic:\n3\n    Excel(int height, char width) {\n4\n        \n5\n    }\n6\n    \n7\n    void set(int row, char column, int val) {\n8\n        \n9\n    }\n10\n    \n11\n    int get(int row, char column) {\n12\n        \n13\n    }\n14\n    \n15\n    int sum(int row, char column, vector<string> numbers) {\n16\n        \n17\n    }\n18\n};\n19\n​\n20\n/**\n21\n * Your Excel object will be instantiated and called as such:\n22\n * Excel* obj = new Excel(height, width);\n23\n * obj->set(row,column,val);\n24\n * int param_2 = obj->get(row,column);\n25\n * int param_3 = obj->sum(row,column,numbers);\n26\n */"}
