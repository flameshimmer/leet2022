{"title":"154. Find Minimum in Rotated Sorted Array II","description":"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n\n[4,5,6,7,0,1,4] if it was rotated 4 times.\n[0,1,4,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\n\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\n\nYou must decrease the overall operation steps as much as possible.\n\n \n\nExample 1:\n\nInput: nums = [1,3,5]\nOutput: 1\n\n\nExample 2:\n\nInput: nums = [2,2,2,0,1]\nOutput: 0\n\n\n \n\nConstraints:\n\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nnums is sorted and rotated between 1 and n times.\n\n \n\nFollow up: This problem is similar to Find Minimum in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?\n\n ","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int findMin(vector<int>& nums) {\n4\n        \n5\n    }\n6\n};"}
