{"title":"1367. Linked List in Binary Tree","description":"Given a binary tree root and a linked list with head as the first node. \n\nReturn True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.\n\nIn this context downward path means a path that starts at some node and goes downwards.\n\n \n\nExample 1:\n\nInput: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\nExplanation: Nodes in blue form a subpath in the binary Tree.  \n\n\nExample 2:\n\nInput: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\n\n\nExample 3:\n\nInput: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: false\nExplanation: There is no path in the binary tree that contains all the elements of the linked list from head.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree will be in the range [1, 2500].\nThe number of nodes in the list will be in the range [1, 100].\n1 <= Node.val <= 100 for each node in the linked list and binary tree.","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\n/**\n12\n * Definition for a binary tree node.\n13\n * struct TreeNode {\n14\n *     int val;\n15\n *     TreeNode *left;\n16\n *     TreeNode *right;\n17\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n18\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n19\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n20\n * };\n21\n */\n22\nclass Solution {\n23\npublic:\n24\n    bool isSubPath(ListNode* head, TreeNode* root) {\n25\n        \n26\n    }\n27\n};"}
