{"title":"1123. Lowest Common Ancestor of Deepest Leaves","description":"Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.\n\nRecall that:\n\nThe node of a binary tree is a leaf if and only if it has no children\nThe depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.\nThe lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.\n\n \n\nExample 1:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.\n\nExample 2:\n\nInput: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree, and it's the lca of itself.\n\n\nExample 3:\n\nInput: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest leaf node in the tree is 2, the lca of one node is itself.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree will be in the range [1, 1000].\n0 <= Node.val <= 1000\nThe values of the nodes in the tree are unique.\n\n \n\nNote: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    TreeNode* lcaDeepestLeaves(TreeNode* root) {\n15\n        \n16\n    }\n17\n};"}
