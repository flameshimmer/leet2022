{"title":"533. Lonely Pixel II","description":"Given an m x n picture consisting of black 'B' and white 'W' pixels and an integer target, return the number of black lonely pixels.\n\nA black lonely pixel is a character 'B' that located at a specific position (r, c) where:\n\nRow r and column c both contain exactly target black pixels.\nFor all rows that have a black pixel at column c, they should be exactly the same as row r.\n\n \n\nExample 1:\n\nInput: picture = [[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"W\",\"B\",\"W\",\"B\",\"W\"]], target = 3\nOutput: 6\nExplanation: All the green 'B' are the black pixels we need (all 'B's at column 1 and 3).\nTake 'B' at row r = 0 and column c = 1 as an example:\n - Rule 1, row r = 0 and column c = 1 both have exactly target = 3 black pixels. \n - Rule 2, the rows have black pixel at column c = 1 are row 0, row 1 and row 2. They are exactly the same as row r = 0.\n\n\nExample 2:\n\nInput: picture = [[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"],[\"W\",\"W\",\"B\"]], target = 1\nOutput: 0\n\n\n \n\nConstraints:\n\nm == picture.length\nn == picture[i].length\n1 <= m, n <= 200\npicture[i][j] is 'W' or 'B'.\n1 <= target <= min(m, n)","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int findBlackPixel(vector<vector<char>>& picture, int target) {\n4\n        \n5\n    }\n6\n};"}
