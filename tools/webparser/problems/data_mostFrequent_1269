{"title":"1746. Maximum Subarray Sum After One Operation","description":"You are given an integer array nums. You must perform exactly one operation where you can replace one element nums[i] with nums[i] * nums[i]. \n\nReturn the maximum possible subarray sum after exactly one operation. The subarray must be non-empty.\n\n \n\nExample 1:\n\nInput: nums = [2,-1,-4,-3]\nOutput: 17\nExplanation: You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.\n\nExample 2:\n\nInput: nums = [1,-1,1,1,-1,-1,1]\nOutput: 4\nExplanation: You can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.\n\n \n\nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int maxSumAfterOperation(vector<int>& nums) {\n4\n        \n5\n    }\n6\n};"}
