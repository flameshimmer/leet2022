{"title":"408. Valid Word Abbreviation","description":"A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.\n\nFor example, a string such as \"substitution\" could be abbreviated as (but not limited to):\n\n\"s10n\" (\"s ubstitutio n\")\n\"sub4u4\" (\"sub stit u tion\")\n\"12\" (\"substitution\")\n\"su3i1u2on\" (\"su bst i t u ti on\")\n\"substitution\" (no substrings replaced)\n\nThe following are not valid abbreviations:\n\n\"s55n\" (\"s ubsti tutio n\", the replaced substrings are adjacent)\n\"s010n\" (has leading zeros)\n\"s0ubstitution\" (replaces an empty substring)\n\nGiven a string word and an abbreviation abbr, return whether the string matches the given abbreviation.\n\nA substring is a contiguous non-empty sequence of characters within a string.\n\n \n\nExample 1:\n\nInput: word = \"internationalization\", abbr = \"i12iz4n\"\nOutput: true\nExplanation: The word \"internationalization\" can be abbreviated as \"i12iz4n\" (\"i nternational iz atio n\").\n\n\nExample 2:\n\nInput: word = \"apple\", abbr = \"a2e\"\nOutput: false\nExplanation: The word \"apple\" cannot be abbreviated as \"a2e\".\n\n\n \n\nConstraints:\n\n1 <= word.length <= 20\nword consists of only lowercase English letters.\n1 <= abbr.length <= 10\nabbr consists of lowercase English letters and digits.\nAll the integers in abbr will fit in a 32-bit integer.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    bool validWordAbbreviation(string word, string abbr) {\n4\n        \n5\n    }\n6\n};"}
