{"title":"1265. Print Immutable Linked List in Reverse","description":"You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:\n\nImmutableListNode: An interface of immutable linked list, you are given the head of the list.\n\nYou need to use the following functions to access the linked list (you can't access the ImmutableListNode directly):\n\nImmutableListNode.printValue(): Print value of the current node.\nImmutableListNode.getNext(): Return the next node.\n\nThe input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.\n\n \n\nExample 1:\n\nInput: head = [1,2,3,4]\nOutput: [4,3,2,1]\n\n\nExample 2:\n\nInput: head = [0,-4,-1,3,-5]\nOutput: [-5,3,-1,-4,0]\n\n\nExample 3:\n\nInput: head = [-2,0,6,4,4,-6]\nOutput: [-6,4,4,6,0,-2]\n\n\n \n\nConstraints:\n\nThe length of the linked list is between [1, 1000].\nThe value of each node in the linked list is between [-1000, 1000].\n\n \n\nFollow up:\n\nCould you solve this problem in:\n\nConstant space complexity?\nLinear time complexity and less than linear space complexity?","functionSig":"1\n/**\n2\n * // This is the ImmutableListNode's API interface.\n3\n * // You should not implement it, or speculate about its implementation.\n4\n * class ImmutableListNode {\n5\n * public:\n6\n *    void printValue(); // print the value of the node.\n7\n *    ImmutableListNode* getNext(); // return the next node.\n8\n * };\n9\n */\n10\n​\n11\nclass Solution {\n12\npublic:\n13\n    void printLinkedListInReverse(ImmutableListNode* head) {\n14\n        \n15\n    }\n16\n};"}
