{"title":"272. Closest Binary Search Tree Value II","description":"Given the root of a binary search tree, a target value, and an integer k, return the k values in the BST that are closest to the target. You may return the answer in any order.\n\nYou are guaranteed to have only one unique set of k values in the BST that are closest to the target.\n\n \n\nExample 1:\n\nInput: root = [4,2,5,1,3], target = 3.714286, k = 2\nOutput: [4,3]\n\n\nExample 2:\n\nInput: root = [1], target = 0.000000, k = 1\nOutput: [1]\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is n.\n1 <= k <= n <= 104.\n0 <= Node.val <= 109\n-109 <= target <= 109\n\n \n\nFollow up: Assume that the BST is balanced. Could you solve it in less than O(n) runtime (where n = total nodes)?","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    vector<int> closestKValues(TreeNode* root, double target, int k) {\n15\n        \n16\n    }\n17\n};"}
