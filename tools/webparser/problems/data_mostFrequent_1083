{"title":"1430. Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree","description":"Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. \n\nWe get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.\n\n \n\nExample 1:\n\nInput: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]\nOutput: true\nExplanation: \nThe path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). \nOther valid sequences are: \n0 -> 1 -> 1 -> 0 \n0 -> 0 -> 0\n\n\nExample 2:\n\nInput: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]\nOutput: false \nExplanation: The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence.\n\n\nExample 3:\n\nInput: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]\nOutput: false\nExplanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.\n\n\n \n\nConstraints:\n\n1 <= arr.length <= 5000\n0 <= arr[i] <= 9\nEach node's value is between [0 - 9].","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    bool isValidSequence(TreeNode* root, vector<int>& arr) {\n15\n        \n16\n    }\n17\n};"}
