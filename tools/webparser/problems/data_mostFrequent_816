{"title":"1506. Find Root of N-Ary Tree","description":"You are given all the nodes of an N-ary tree as an array of Node objects, where each node has a unique value.\n\nReturn the root of the N-ary tree.\n\nCustom testing:\n\nAn N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the null value (see examples).\n\nFor example, the above tree is serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].\n\nThe testing will be done in the following way:\n\nThe input data should be provided as a serialization of the tree.\nThe driver code will construct the tree from the serialized input data and put each Node object into an array in an arbitrary order.\nThe driver code will pass the array to findRoot, and your function should find and return the root Node object in the array.\nThe driver code will take the returned Node object and serialize it. If the serialized value and the input data are the same, the test passes.\n\n \n\nExample 1:\n\nInput: tree = [1,null,3,2,4,null,5,6]\nOutput: [1,null,3,2,4,null,5,6]\nExplanation: The tree from the input data is shown above.\nThe driver code creates the tree and gives findRoot the Node objects in an arbitrary order.\nFor example, the passed array could be [Node(5),Node(4),Node(3),Node(6),Node(2),Node(1)] or [Node(2),Node(6),Node(1),Node(3),Node(5),Node(4)].\nThe findRoot function should return the root Node(1), and the driver code will serialize it and compare with the input data.\nThe input data and serialized Node(1) are the same, so the test passes.\n\n\nExample 2:\n\nInput: tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n\n\n \n\nConstraints:\n\nThe total number of nodes is between [1, 5 * 104].\nEach node has a unique value.\n\n \n\nFollow up:\n\nCould you solve this problem in constant space complexity with a linear time algorithm?","functionSig":"1\n/*\n2\n// Definition for a Node.\n3\nclass Node {\n4\npublic:\n5\n    int val;\n6\n    vector<Node*> children;\n7\n​\n8\n    Node() {}\n9\n​\n10\n    Node(int _val) {\n11\n        val = _val;\n12\n    }\n13\n​\n14\n    Node(int _val, vector<Node*> _children) {\n15\n        val = _val;\n16\n        children = _children;\n17\n    }\n18\n};\n19\n*/\n20\n​\n21\nclass Solution {\n22\npublic:\n23\n    Node* findRoot(vector<Node*> tree) {\n24\n        \n25\n    }\n26\n};"}
