{"title":"1836. Remove Duplicates From an Unsorted Linked List","description":"Given the head of a linked list, find all the values that appear more than once in the list and delete the nodes that have any of those values.\n\nReturn the linked list after the deletions.\n\n \n\nExample 1:\n\nInput: head = [1,2,3,2]\nOutput: [1,3]\nExplanation: 2 appears twice in the linked list, so all 2's should be deleted. After deleting all 2's, we are left with [1,3].\n\n\nExample 2:\n\nInput: head = [2,1,1,2]\nOutput: []\nExplanation: 2 and 1 both appear twice. All the elements should be deleted.\n\n\nExample 3:\n\nInput: head = [3,2,2,1,3,2,4]\nOutput: [1,4]\nExplanation: 3 appears twice and 2 appears three times. After deleting all 3's and 2's, we are left with [1,4].\n\n\n \n\nConstraints:\n\nThe number of nodes in the list is in the range [1, 105]\n1 <= Node.val <= 105","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\nclass Solution {\n12\npublic:\n13\n    ListNode* deleteDuplicatesUnsorted(ListNode* head) {\n14\n        \n15\n    }\n16\n};"}
