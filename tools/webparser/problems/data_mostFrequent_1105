{"title":"341. Flatten Nested List Iterator","description":"You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n\nImplement the NestedIterator class:\n\nNestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\nint next() Returns the next integer in the nested list.\nboolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\n\nYour code will be tested with the following pseudocode:\n\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n\n\nIf res matches the expected flattened list, then your code will be judged as correct.\n\n \n\nExample 1:\n\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n\n\nExample 2:\n\nInput: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n\n\n \n\nConstraints:\n\n1 <= nestedList.length <= 500\nThe values of the integers in the nested list is in the range [-106, 106].","functionSig":"1\n/**\n2\n * // This is the interface that allows for creating nested lists.\n3\n * // You should not implement it, or speculate about its implementation\n4\n * class NestedInteger {\n5\n *   public:\n6\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n7\n *     bool isInteger() const;\n8\n *\n9\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n10\n *     // The result is undefined if this NestedInteger holds a nested list\n11\n *     int getInteger() const;\n12\n *\n13\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n14\n *     // The result is undefined if this NestedInteger holds a single integer\n15\n *     const vector<NestedInteger> &getList() const;\n16\n * };\n17\n */\n18\n​\n19\nclass NestedIterator {\n20\npublic:\n21\n    NestedIterator(vector<NestedInteger> &nestedList) {\n22\n        \n23\n    }\n24\n    \n25\n    int next() {\n26\n        \n27\n    }\n28\n    \n29\n    bool hasNext() {\n30\n        \n31\n    }\n32\n};\n33\n​\n34\n/**\n35\n * Your NestedIterator object will be instantiated and called as such:\n36\n * NestedIterator i(nestedList);\n37\n * while (i.hasNext()) cout << i.next();"}
