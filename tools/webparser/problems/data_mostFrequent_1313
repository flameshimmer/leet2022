{"title":"1902. Depth of BST Given Insertion Order","description":"You are given a 0-indexed integer array order of length n, a permutation of integers from 1 to n representing the order of insertion into a binary search tree.\n\nA binary search tree is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\nThe binary search tree is constructed as follows:\n\norder[0] will be the root of the binary search tree.\nAll subsequent elements are inserted as the child of any existing node such that the binary search tree properties hold.\n\nReturn the depth of the binary search tree.\n\nA binary tree's depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n \n\nExample 1:\n\nInput: order = [2,1,4,3]\nOutput: 3\nExplanation: The binary search tree has a depth of 3 with path 2->3->4.\n\n\nExample 2:\n\nInput: order = [2,1,3,4]\nOutput: 3\nExplanation: The binary search tree has a depth of 3 with path 2->3->4.\n\n\nExample 3:\n\nInput: order = [1,2,3,4]\nOutput: 4\nExplanation: The binary search tree has a depth of 4 with path 1->2->3->4.\n\n\n \n\nConstraints:\n\nn == order.length\n1 <= n <= 105\norder is a permutation of integers between 1 and n.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int maxDepthBST(vector<int>& order) {\n4\n        \n5\n    }\n6\n};"}
