{"title":"364. Nested List Weight Sum II","description":"You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe depth of an integer is the number of lists that it is inside of. For example, the nested list [1,[2,2],[[3],2],1] has each integer's value set to its depth. Let maxDepth be the maximum depth of any integer.\n\nThe weight of an integer is maxDepth - (the depth of the integer) + 1.\n\nReturn the sum of each integer in nestedList multiplied by its weight.\n\n \n\nExample 1:\n\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: 8\nExplanation: Four 1's with a weight of 1, one 2 with a weight of 2.\n1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8\n\n\nExample 2:\n\nInput: nestedList = [1,[4,[6]]]\nOutput: 17\nExplanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1.\n1*3 + 4*2 + 6*1 = 17\n\n\n \n\nConstraints:\n\n1 <= nestedList.length <= 50\nThe values of the integers in the nested list is in the range [-100, 100].\nThe maximum depth of any integer is less than or equal to 50.","functionSig":"1\n/**\n2\n * // This is the interface that allows for creating nested lists.\n3\n * // You should not implement it, or speculate about its implementation\n4\n * class NestedInteger {\n5\n *   public:\n6\n *     // Constructor initializes an empty nested list.\n7\n *     NestedInteger();\n8\n *\n9\n *     // Constructor initializes a single integer.\n10\n *     NestedInteger(int value);\n11\n *\n12\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n13\n *     bool isInteger() const;\n14\n *\n15\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n16\n *     // The result is undefined if this NestedInteger holds a nested list\n17\n *     int getInteger() const;\n18\n *\n19\n *     // Set this NestedInteger to hold a single integer.\n20\n *     void setInteger(int value);\n21\n *\n22\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n23\n *     void add(const NestedInteger &ni);\n24\n *\n25\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n26\n *     // The result is undefined if this NestedInteger holds a single integer\n27\n *     const vector<NestedInteger> &getList() const;\n28\n * };\n29\n */\n30\nclass Solution {\n31\npublic:\n32\n    int depthSumInverse(vector<NestedInteger>& nestedList) {\n33\n        \n34\n    }"}
