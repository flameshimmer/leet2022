{"title":"588. Design In-Memory File System","description":"Design a data structure that simulates an in-memory file system.\n\nImplement the FileSystem class:\n\nFileSystem() Initializes the object of the system.\nList<String> ls(String path)\nIf path is a file path, returns a list that only contains this file's name.\nIf path is a directory path, returns the list of file and directory names in this directory.\nThe answer should in lexicographic order.\nvoid mkdir(String path) Makes a new directory according to the given path. The given directory path does not exist. If the middle directories in the path do not exist, you should create them as well.\nvoid addContentToFile(String filePath, String content)\nIf filePath does not exist, creates that file containing given content.\nIf filePath already exists, appends the given content to original content.\nString readContentFromFile(String filePath) Returns the content in the file at filePath.\n\n \n\nExample 1:\n\nInput\n[\"FileSystem\", \"ls\", \"mkdir\", \"addContentToFile\", \"ls\", \"readContentFromFile\"]\n[[], [\"/\"], [\"/a/b/c\"], [\"/a/b/c/d\", \"hello\"], [\"/\"], [\"/a/b/c/d\"]]\nOutput\n[null, [], null, null, [\"a\"], \"hello\"]\n\nExplanation\nFileSystem fileSystem = new FileSystem();\nfileSystem.ls(\"/\");                         // return []\nfileSystem.mkdir(\"/a/b/c\");\nfileSystem.addContentToFile(\"/a/b/c/d\", \"hello\");\nfileSystem.ls(\"/\");                         // return [\"a\"]\nfileSystem.readContentFromFile(\"/a/b/c/d\"); // return \"hello\"\n\n\n \n\nConstraints:\n\n1 <= path.length, filePath.length <= 100\npath and filePath are absolute paths which begin with '/' and do not end with '/' except that the path is just \"/\".\nYou can assume that all directory names and file names only contain lowercase letters, and the same names will not exist in the same directory.\nYou can assume that all operations will be passed valid parameters, and users will not attempt to retrieve file content or list a directory or file that does not exist.\n1 <= content.length <= 50\nAt most 300 calls will be made to ls, mkdir, addContentToFile, and readContentFromFile.","functionSig":"1\nclass FileSystem {\n2\npublic:\n3\n    FileSystem() {\n4\n        \n5\n    }\n6\n    \n7\n    vector<string> ls(string path) {\n8\n        \n9\n    }\n10\n    \n11\n    void mkdir(string path) {\n12\n        \n13\n    }\n14\n    \n15\n    void addContentToFile(string filePath, string content) {\n16\n        \n17\n    }\n18\n    \n19\n    string readContentFromFile(string filePath) {\n20\n        \n21\n    }\n22\n};\n23\n​\n24\n/**\n25\n * Your FileSystem object will be instantiated and called as such:\n26\n * FileSystem* obj = new FileSystem();\n27\n * vector<string> param_1 = obj->ls(path);\n28\n * obj->mkdir(path);\n29\n * obj->addContentToFile(filePath,content);\n30\n * string param_4 = obj->readContentFromFile(filePath);\n31\n */"}
