{"title":"366. Find Leaves of Binary Tree","description":"Given the root of a binary tree, collect a tree's nodes as if you were doing this:\n\nCollect all the leaf nodes.\nRemove all the leaf nodes.\nRepeat until the tree is empty.\n\n \n\nExample 1:\n\nInput: root = [1,2,3,4,5]\nOutput: [[4,5,3],[2],[1]]\nExplanation:\n[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.\n\n\nExample 2:\n\nInput: root = [1]\nOutput: [[1]]\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 100].\n-100 <= Node.val <= 100","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    vector<vector<int>> findLeaves(TreeNode* root) {\n15\n        \n16\n    }\n17\n};"}
