{"title":"683. K Empty Slots","description":"You have n bulbs in a row numbered from 1 to n. Initially, all the bulbs are turned off. We turn on exactly one bulb every day until all bulbs are on after n days.\n\nYou are given an array bulbs of length n where bulbs[i] = x means that on the (i+1)th day, we will turn on the bulb at position x where i is 0-indexed and x is 1-indexed.\n\nGiven an integer k, return the minimum day number such that there exists two turned on bulbs that have exactly k bulbs between them that are all turned off. If there isn't such day, return -1.\n\n \n\nExample 1:\n\nInput: bulbs = [1,3,2], k = 1\nOutput: 2\nExplanation:\nOn the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]\nOn the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]\nOn the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]\nWe return 2 because on the second day, there were two on bulbs with one off bulb between them.\n\nExample 2:\n\nInput: bulbs = [1,2,3], k = 1\nOutput: -1\n\n\n \n\nConstraints:\n\nn == bulbs.length\n1 <= n <= 2 * 104\n1 <= bulbs[i] <= n\nbulbs is a permutation of numbers from 1 to n.\n0 <= k <= 2 * 104","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int kEmptySlots(vector<int>& bulbs, int k) {\n4\n        \n5\n    }\n6\n};"}
