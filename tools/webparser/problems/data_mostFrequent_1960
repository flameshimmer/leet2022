{"title":"1106. Parsing A Boolean Expression","description":"Return the result of evaluating a given boolean expression, represented as a string.\n\nAn expression can either be:\n\n\"t\", evaluating to True;\n\"f\", evaluating to False;\n\"!(expr)\", evaluating to the logical NOT of the inner expression expr;\n\"&(expr1,expr2,...)\", evaluating to the logical AND of 2 or more inner expressions expr1, expr2, ...;\n\"|(expr1,expr2,...)\", evaluating to the logical OR of 2 or more inner expressions expr1, expr2, ...\n\n \n\nExample 1:\n\nInput: expression = \"!(f)\"\nOutput: true\n\n\nExample 2:\n\nInput: expression = \"|(f,t)\"\nOutput: true\n\n\nExample 3:\n\nInput: expression = \"&(t,f)\"\nOutput: false\n\n\n \n\nConstraints:\n\n1 <= expression.length <= 2 * 104\nexpression[i] consists of characters in {'(', ')', '&', '|', '!', 't', 'f', ','}.\nexpression is a valid expression representing a boolean, as given in the description.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    bool parseBoolExpr(string expression) {\n4\n        \n5\n    }\n6\n};"}
