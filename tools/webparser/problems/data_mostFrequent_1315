{"title":"2297. Jump Game IX","description":"You are given a 0-indexed integer array nums of length n. You are initially standing at index 0. You can jump from index i to index j where i < j if:\n\nnums[i] <= nums[j] and nums[k] < nums[i] for all indexes k in the range i < k < j, or\nnums[i] > nums[j] and nums[k] >= nums[i] for all indexes k in the range i < k < j.\n\nYou are also given an integer array costs of length n where costs[i] denotes the cost of jumping to index i.\n\nReturn the minimum cost to jump to the index n - 1.\n\n \n\nExample 1:\n\nInput: nums = [3,2,4,4,1], costs = [3,7,6,4,2]\nOutput: 8\nExplanation: You start at index 0.\n- Jump to index 2 with a cost of costs[2] = 6.\n- Jump to index 4 with a cost of costs[4] = 2.\nThe total cost is 8. It can be proven that 8 is the minimum cost needed.\nTwo other possible paths are from index 0 -> 1 -> 4 and index 0 -> 2 -> 3 -> 4.\nThese have a total cost of 9 and 12, respectively.\n\n\nExample 2:\n\nInput: nums = [0,1,2], costs = [1,1,1]\nOutput: 2\nExplanation: Start at index 0.\n- Jump to index 1 with a cost of costs[1] = 1.\n- Jump to index 2 with a cost of costs[2] = 1.\nThe total cost is 2. Note that you cannot jump directly from index 0 to index 2 because nums[0] <= nums[1].\n\n\n \n\nConstraints:\n\nn == nums.length == costs.length\n1 <= n <= 105\n0 <= nums[i], costs[i] <= 105","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    long long minCost(vector<int>& nums, vector<int>& costs) {\n4\n        \n5\n    }\n6\n};"}
