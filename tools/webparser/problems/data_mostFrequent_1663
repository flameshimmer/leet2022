{"title":"333. Largest BST Subtree","description":"Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.\n\nA Binary Search Tree (BST) is a tree in which all the nodes follow the below-mentioned properties:\n\nThe left subtree values are less than the value of their parent (root) node's value.\nThe right subtree values are greater than the value of their parent (root) node's value.\n\nNote: A subtree must include all of its descendants.\n\n \n\nExample 1:\n\nInput: root = [10,5,15,1,8,null,7]\nOutput: 3\nExplanation: The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3.\n\nExample 2:\n\nInput: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]\nOutput: 2\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-104 <= Node.val <= 104\n\n \n\nFollow up: Can you figure out ways to solve it with O(n) time complexity?","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    int largestBSTSubtree(TreeNode* root) {\n15\n        \n16\n    }\n17\n};"}
