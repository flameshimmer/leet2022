{"title":"478. Generate Random Point in a Circle","description":"Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\n\nImplement the Solution class:\n\nSolution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\nrandPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\n\n \n\nExample 1:\n\nInput\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]\nOutput\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\nExplanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n\n\n \n\nConstraints:\n\n0 < radius <= 108\n-107 <= x_center, y_center <= 107\nAt most 3 * 104 calls will be made to randPoint.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    Solution(double radius, double x_center, double y_center) {\n4\n        \n5\n    }\n6\n    \n7\n    vector<double> randPoint() {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your Solution object will be instantiated and called as such:\n14\n * Solution* obj = new Solution(radius, x_center, y_center);\n15\n * vector<double> param_1 = obj->randPoint();\n16\n */"}
