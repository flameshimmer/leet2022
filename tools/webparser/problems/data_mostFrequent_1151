{"title":"759. Employee Free Time","description":"We are given a list schedule of employees, which represents the working time for each employee.\n\nEach employee has a list of non-overlapping Intervals, and these intervals are in sorted order.\n\nReturn the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.\n\n(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.\n\n \n\nExample 1:\n\nInput: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]\nOutput: [[3,4]]\nExplanation: There are a total of three employees, and all common\nfree time intervals would be [-inf, 1], [3, 4], [10, inf].\nWe discard any intervals that contain inf as they aren't finite.\n\n\nExample 2:\n\nInput: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]\nOutput: [[5,6],[7,9]]\n\n\n \n\nConstraints:\n\n1 <= schedule.length , schedule[i].length <= 50\n0 <= schedule[i].start < schedule[i].end <= 10^8","functionSig":"1\n/*\n2\n// Definition for an Interval.\n3\nclass Interval {\n4\npublic:\n5\n    int start;\n6\n    int end;\n7\n​\n8\n    Interval() {}\n9\n​\n10\n    Interval(int _start, int _end) {\n11\n        start = _start;\n12\n        end = _end;\n13\n    }\n14\n};\n15\n*/\n16\n​\n17\nclass Solution {\n18\npublic:\n19\n    vector<Interval> employeeFreeTime(vector<vector<Interval>> schedule) {\n20\n        \n21\n    }\n22\n};"}
