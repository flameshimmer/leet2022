{"title":"352. Data Stream as Disjoint Intervals","description":"Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.\n\nImplement the SummaryRanges class:\n\nSummaryRanges() Initializes the object with an empty stream.\nvoid addNum(int val) Adds the integer val to the stream.\nint[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi].\n\n \n\nExample 1:\n\nInput\n[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\nOutput\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\nExplanation\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n\n\n \n\nConstraints:\n\n0 <= val <= 104\nAt most 3 * 104 calls will be made to addNum and getIntervals.\n\n \n\nFollow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?","functionSig":"1\nclass SummaryRanges {\n2\npublic:\n3\n    SummaryRanges() {\n4\n        \n5\n    }\n6\n    \n7\n    void addNum(int val) {\n8\n        \n9\n    }\n10\n    \n11\n    vector<vector<int>> getIntervals() {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your SummaryRanges object will be instantiated and called as such:\n18\n * SummaryRanges* obj = new SummaryRanges();\n19\n * obj->addNum(val);\n20\n * vector<vector<int>> param_2 = obj->getIntervals();\n21\n */"}
