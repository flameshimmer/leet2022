{"title":"25. Reverse Nodes in k-Group","description":"Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\n\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\n\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\n \n\nExample 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\n\nExample 2:\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n\n \n\nConstraints:\n\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000\n\n \n\nFollow-up: Can you solve the problem in O(1) extra memory space?","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\nclass Solution {\n12\npublic:\n13\n    ListNode* reverseKGroup(ListNode* head, int k) {\n14\n        \n15\n    }\n16\n};"}
