{"title":"510. Inorder Successor in BST II","description":"Given a node in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return null.\n\nThe successor of a node is the node with the smallest key greater than node.val.\n\nYou will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for Node:\n\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n\n\n \n\nExample 1:\n\nInput: tree = [2,1,3], node = 1\nOutput: 2\nExplanation: 1's in-order successor node is 2. Note that both the node and the return value is of Node type.\n\n\nExample 2:\n\nInput: tree = [5,3,6,2,4,null,null,1], node = 6\nOutput: null\nExplanation: There is no in-order successor of the current node, so the answer is null.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-105 <= Node.val <= 105\nAll Nodes will have unique values.\n\n \n\nFollow up: Could you solve it without looking up any of the node's values?","functionSig":"1\n/*\n2\n// Definition for a Node.\n3\nclass Node {\n4\npublic:\n5\n    int val;\n6\n    Node* left;\n7\n    Node* right;\n8\n    Node* parent;\n9\n};\n10\n*/\n11\n​\n12\nclass Solution {\n13\npublic:\n14\n    Node* inorderSuccessor(Node* node) {\n15\n        \n16\n    }\n17\n};"}
