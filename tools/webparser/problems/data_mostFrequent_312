{"title":"303. Range Sum Query - Immutable","description":"Given an integer array nums, handle multiple queries of the following type:\n\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \n\nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 104\n-105 <= nums[i] <= 105\n0 <= left <= right < nums.length\nAt most 104 calls will be made to sumRange.","functionSig":"1\nclass NumArray {\n2\npublic:\n3\n    NumArray(vector<int>& nums) {\n4\n        \n5\n    }\n6\n    \n7\n    int sumRange(int left, int right) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your NumArray object will be instantiated and called as such:\n14\n * NumArray* obj = new NumArray(nums);\n15\n * int param_1 = obj->sumRange(left,right);\n16\n */"}
