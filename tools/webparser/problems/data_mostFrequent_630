{"title":"2276. Count Integers in Intervals","description":"Given an empty set of intervals, implement a data structure that can:\n\nAdd an interval to the set of intervals.\nCount the number of integers that are present in at least one interval.\n\nImplement the CountIntervals class:\n\nCountIntervals() Initializes the object with an empty set of intervals.\nvoid add(int left, int right) Adds the interval [left, right] to the set of intervals.\nint count() Returns the number of integers that are present in at least one interval.\n\nNote that an interval [left, right] denotes all the integers x where left <= x <= right.\n\n \n\nExample 1:\n\nInput\n[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]\n[[], [2, 3], [7, 10], [], [5, 8], []]\nOutput\n[null, null, null, 6, null, 8]\n\nExplanation\nCountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals. \ncountIntervals.add(2, 3);  // add [2, 3] to the set of intervals.\ncountIntervals.add(7, 10); // add [7, 10] to the set of intervals.\ncountIntervals.count();    // return 6\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 7, 8, 9, and 10 are present in the interval [7, 10].\ncountIntervals.add(5, 8);  // add [5, 8] to the set of intervals.\ncountIntervals.count();    // return 8\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 5 and 6 are present in the interval [5, 8].\n                           // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].\n                           // the integers 9 and 10 are present in the interval [7, 10].\n\n\n \n\nConstraints:\n\n1 <= left <= right <= 109\nAt most 105 calls in total will be made to add and count.\nAt least one call will be made to count.","functionSig":"1\nclass CountIntervals {\n2\npublic:\n3\n    CountIntervals() {\n4\n        \n5\n    }\n6\n    \n7\n    void add(int left, int right) {\n8\n        \n9\n    }\n10\n    \n11\n    int count() {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your CountIntervals object will be instantiated and called as such:\n18\n * CountIntervals* obj = new CountIntervals();\n19\n * obj->add(left,right);\n20\n * int param_2 = obj->count();\n21\n */"}
