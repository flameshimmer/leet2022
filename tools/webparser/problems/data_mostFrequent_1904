{"title":"225. Implement Stack using Queues","description":"Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\n\nImplement the MyStack class:\n\nvoid push(int x) Pushes element x to the top of the stack.\nint pop() Removes the element on the top of the stack and returns it.\nint top() Returns the element on the top of the stack.\nboolean empty() Returns true if the stack is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n \n\nExample 1:\n\nInput\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n\n \n\nConstraints:\n\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, top, and empty.\nAll the calls to pop and top are valid.\n\n \n\nFollow-up: Can you implement the stack using only one queue?","functionSig":"1\nclass MyStack {\n2\npublic:\n3\n    MyStack() {\n4\n        \n5\n    }\n6\n    \n7\n    void push(int x) {\n8\n        \n9\n    }\n10\n    \n11\n    int pop() {\n12\n        \n13\n    }\n14\n    \n15\n    int top() {\n16\n        \n17\n    }\n18\n    \n19\n    bool empty() {\n20\n        \n21\n    }\n22\n};\n23\n​\n24\n/**\n25\n * Your MyStack object will be instantiated and called as such:\n26\n * MyStack* obj = new MyStack();\n27\n * obj->push(x);\n28\n * int param_2 = obj->pop();\n29\n * int param_3 = obj->top();\n30\n * bool param_4 = obj->empty();\n31\n */"}
