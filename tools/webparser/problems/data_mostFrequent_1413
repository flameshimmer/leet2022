{"title":"642. Design Search Autocomplete System","description":"Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#').\n\nYou are given a string array sentences and an integer array times both of length n where sentences[i] is a previously typed sentence and times[i] is the corresponding number of times the sentence was typed. For each input character except '#', return the top 3 historical hot sentences that have the same prefix as the part of the sentence already typed.\n\nHere are the specific rules:\n\nThe hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.\nThe returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first).\nIf less than 3 hot sentences exist, return as many as you can.\nWhen the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.\n\nImplement the AutocompleteSystem class:\n\nAutocompleteSystem(String[] sentences, int[] times) Initializes the object with the sentences and times arrays.\nList<String> input(char c) This indicates that the user typed the character c.\nReturns an empty array [] if c == '#' and stores the inputted sentence in the system.\nReturns the top 3 historical hot sentences that have the same prefix as the part of the sentence already typed. If there are fewer than 3 matches, return them all.\n\n \n\nExample 1:\n\nInput\n[\"AutocompleteSystem\", \"input\", \"input\", \"input\", \"input\"]\n[[[\"i love you\", \"island\", \"iroman\", \"i love leetcode\"], [5, 3, 2, 2]], [\"i\"], [\" \"], [\"a\"], [\"#\"]]\nOutput\n[null, [\"i love you\", \"island\", \"i love leetcode\"], [\"i love you\", \"i love leetcode\"], [], []]\n\nExplanation\nAutocompleteSystem obj = new AutocompleteSystem([\"i love you\", \"island\", \"iroman\", \"i love leetcode\"], [5, 3, 2, 2]);\nobj.input(\"i\"); // return [\"i love you\", \"island\", \"i love leetcode\"]. There are four sentences that have prefix \"i\". Among them, \"ironman\" and \"i love leetcode\" have same hot degree. Since ' ' has ASCII code 32 and 'r' has ASCII code 114, \"i love leetcode\" should be in front of \"ironman\". Also we only need to output top 3 hot sentences, so \"ironman\" will be ignored.\nobj.input(\" \"); // return [\"i love you\", \"i love leetcode\"]. There are only two sentences that have prefix \"i \".\nobj.input(\"a\"); // return []. There are no sentences that have prefix \"i a\".\nobj.input(\"#\"); // return []. The user finished the input, the sentence \"i a\" should be saved as a historical sentence in system. And the following input will be counted as a new search.\n\n\n \n\nConstraints:\n\nn == sentences.length\nn == times.length\n1 <= n <= 100\n1 <= sentences[i].length <= 100\n1 <= times[i] <= 50\nc is a lowercase English letter, a hash '#', or space ' '.\nEach tested sentence will be a sequence of characters c that end with the character '#'.\nEach tested sentence will have a length in the range [1, 200].\nThe words in each input sentence are separated by single spaces.\nAt most 5000 calls will be made to input.","functionSig":"1\nclass AutocompleteSystem {\n2\npublic:\n3\n    AutocompleteSystem(vector<string>& sentences, vector<int>& times) {\n4\n        \n5\n    }\n6\n    \n7\n    vector<string> input(char c) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your AutocompleteSystem object will be instantiated and called as such:\n14\n * AutocompleteSystem* obj = new AutocompleteSystem(sentences, times);\n15\n * vector<string> param_1 = obj->input(c);\n16\n */"}
