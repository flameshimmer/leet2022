{"title":"1666. Change the Root of a Binary Tree","description":"Given the root of a binary tree and a leaf node, reroot the tree so that the leaf is the new root.\n\nYou can reroot the tree with the following steps for each node cur on the path starting from the leaf up to the root​​​ excluding the root:\n\nIf cur has a left child, then that child becomes cur's right child.\ncur's original parent becomes cur's left child. Note that in this process the original parent's pointer to cur becomes null, making it have at most one child.\n\nReturn the new root of the rerooted tree.\n\nNote: Ensure that your solution sets the Node.parent pointers correctly after rerooting or you will receive \"Wrong Answer\".\n\n \n\nExample 1:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7\nOutput: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]\n\n\nExample 2:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0\nOutput: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 100].\n-109 <= Node.val <= 109\nAll Node.val are unique.\nleaf exist in the tree.","functionSig":"1\n/*\n2\n// Definition for a Node.\n3\nclass Node {\n4\npublic:\n5\n    int val;\n6\n    Node* left;\n7\n    Node* right;\n8\n    Node* parent;\n9\n};\n10\n*/\n11\n​\n12\nclass Solution {\n13\npublic:\n14\n    Node* flipBinaryTree(Node* root, Node * leaf) {\n15\n        \n16\n    }\n17\n};"}
