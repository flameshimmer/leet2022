{"title":"445. Add Two Numbers II","description":"You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n \n\nExample 1:\n\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\nOutput: [7,8,0,7]\n\n\nExample 2:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [8,0,7]\n\n\nExample 3:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\n\n \n\nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n \n\nFollow up: Could you solve it without reversing the input lists?","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\nclass Solution {\n12\npublic:\n13\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n14\n        \n15\n    }\n16\n};"}
