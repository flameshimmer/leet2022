{"title":"449. Serialize and Deserialize BST","description":"Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n\nThe encoded string should be as compact as possible.\n\n \n\nExample 1:\n\nInput: root = [2,1,3]\nOutput: [2,1,3]\n\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n0 <= Node.val <= 104\nThe input tree is guaranteed to be a binary search tree.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n8\n * };\n9\n */\n10\nclass Codec {\n11\npublic:\n12\n​\n13\n    // Encodes a tree to a single string.\n14\n    string serialize(TreeNode* root) {\n15\n        \n16\n    }\n17\n​\n18\n    // Decodes your encoded data to tree.\n19\n    TreeNode* deserialize(string data) {\n20\n        \n21\n    }\n22\n};\n23\n​\n24\n// Your Codec object will be instantiated and called as such:\n25\n// Codec* ser = new Codec();\n26\n// Codec* deser = new Codec();\n27\n// string tree = ser->serialize(root);\n28\n// TreeNode* ans = deser->deserialize(tree);\n29\n// return ans;"}
