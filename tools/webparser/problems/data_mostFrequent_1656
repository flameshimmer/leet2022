{"title":"622. Design Circular Queue","description":"Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\n\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n\nImplementation the MyCircularQueue class:\n\nMyCircularQueue(k) Initializes the object with the size of the queue to be k.\nint Front() Gets the front item from the queue. If the queue is empty, return -1.\nint Rear() Gets the last item from the queue. If the queue is empty, return -1.\nboolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.\nboolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.\nboolean isEmpty() Checks whether the circular queue is empty or not.\nboolean isFull() Checks whether the circular queue is full or not.\n\nYou must solve the problem without using the built-in queue data structure in your programming language. \n\n \n\nExample 1:\n\nInput\n[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 3, true, true, true, 4]\n\nExplanation\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n\n\n \n\nConstraints:\n\n1 <= k <= 1000\n0 <= value <= 1000\nAt most 3000 calls will be made to enQueue, deQueue, Front, Rear, isEmpty, and isFull.","functionSig":"1\nclass MyCircularQueue {\n2\npublic:\n3\n    MyCircularQueue(int k) {\n4\n        \n5\n    }\n6\n    \n7\n    bool enQueue(int value) {\n8\n        \n9\n    }\n10\n    \n11\n    bool deQueue() {\n12\n        \n13\n    }\n14\n    \n15\n    int Front() {\n16\n        \n17\n    }\n18\n    \n19\n    int Rear() {\n20\n        \n21\n    }\n22\n    \n23\n    bool isEmpty() {\n24\n        \n25\n    }\n26\n    \n27\n    bool isFull() {\n28\n        \n29\n    }\n30\n};\n31\n​\n32\n/**\n33\n * Your MyCircularQueue object will be instantiated and called as such:\n34\n * MyCircularQueue* obj = new MyCircularQueue(k);\n35\n * bool param_1 = obj->enQueue(value);\n36\n * bool param_2 = obj->deQueue();\n37\n * int param_3 = obj->Front();\n38\n * int param_4 = obj->Rear();\n39\n * bool param_5 = obj->isEmpty();\n40\n * bool param_6 = obj->isFull();"}
