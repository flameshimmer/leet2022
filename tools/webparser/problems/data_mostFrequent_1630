{"title":"705. Design HashSet","description":"Design a HashSet without using any built-in hash table libraries.\n\nImplement MyHashSet class:\n\nvoid add(key) Inserts the value key into the HashSet.\nbool contains(key) Returns whether the value key exists in the HashSet or not.\nvoid remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.\n\n \n\nExample 1:\n\nInput\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\n\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)\n\n \n\nConstraints:\n\n0 <= key <= 106\nAt most 104 calls will be made to add, remove, and contains.","functionSig":"1\nclass MyHashSet {\n2\npublic:\n3\n    MyHashSet() {\n4\n        \n5\n    }\n6\n    \n7\n    void add(int key) {\n8\n        \n9\n    }\n10\n    \n11\n    void remove(int key) {\n12\n        \n13\n    }\n14\n    \n15\n    bool contains(int key) {\n16\n        \n17\n    }\n18\n};\n19\n​\n20\n/**\n21\n * Your MyHashSet object will be instantiated and called as such:\n22\n * MyHashSet* obj = new MyHashSet();\n23\n * obj->add(key);\n24\n * obj->remove(key);\n25\n * bool param_3 = obj->contains(key);\n26\n */"}
