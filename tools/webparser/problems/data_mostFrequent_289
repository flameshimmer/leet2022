{"title":"527. Word Abbreviation","description":"Given an array of distinct strings words, return the minimal possible abbreviations for every word.\n\nThe following are the rules for a string abbreviation:\n\nBegin with the first character, and then the number of characters abbreviated, followed by the last character.\nIf there is any conflict and more than one word shares the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original word.\nIf the abbreviation does not make the word shorter, then keep it as the original.\n\n \n\nExample 1:\n\nInput: words = [\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\nOutput: [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\n\n\nExample 2:\n\nInput: words = [\"aa\",\"aaa\"]\nOutput: [\"aa\",\"aaa\"]\n\n\n \n\nConstraints:\n\n1 <= words.length <= 400\n2 <= words[i].length <= 400\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    vector<string> wordsAbbreviation(vector<string>& words) {\n4\n        \n5\n    }\n6\n};"}
