{"title":"703. Kth Largest Element in a Stream","description":"Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\nImplement KthLargest class:\n\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\nint add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.\n\n \n\nExample 1:\n\nInput\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n\n\n \n\nConstraints:\n\n1 <= k <= 104\n0 <= nums.length <= 104\n-104 <= nums[i] <= 104\n-104 <= val <= 104\nAt most 104 calls will be made to add.\nIt is guaranteed that there will be at least k elements in the array when you search for the kth element.","functionSig":"1\nclass KthLargest {\n2\npublic:\n3\n    KthLargest(int k, vector<int>& nums) {\n4\n        \n5\n    }\n6\n    \n7\n    int add(int val) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your KthLargest object will be instantiated and called as such:\n14\n * KthLargest* obj = new KthLargest(k, nums);\n15\n * int param_1 = obj->add(val);\n16\n */"}
