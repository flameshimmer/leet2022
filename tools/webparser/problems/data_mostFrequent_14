{"title":"1650. Lowest Common Ancestor of a Binary Tree III","description":"Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).\n\nEach node will have a reference to its parent node. The definition for Node is below:\n\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n\n\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).\"\n\n \n\nExample 1:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\n\nExample 2:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.\n\n\nExample 3:\n\nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\np and q exist in the tree.","functionSig":"1\n/*\n2\n// Definition for a Node.\n3\nclass Node {\n4\npublic:\n5\n    int val;\n6\n    Node* left;\n7\n    Node* right;\n8\n    Node* parent;\n9\n};\n10\n*/\n11\n​\n12\nclass Solution {\n13\npublic:\n14\n    Node* lowestCommonAncestor(Node* p, Node * q) {\n15\n        \n16\n    }\n17\n};"}
