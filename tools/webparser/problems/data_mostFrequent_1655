{"title":"109. Convert Sorted List to Binary Search Tree","description":"Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\n\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n\n \n\nExample 1:\n\nInput: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n\n\nExample 2:\n\nInput: head = []\nOutput: []\n\n\n \n\nConstraints:\n\nThe number of nodes in head is in the range [0, 2 * 104].\n-105 <= Node.val <= 105","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\n/**\n12\n * Definition for a binary tree node.\n13\n * struct TreeNode {\n14\n *     int val;\n15\n *     TreeNode *left;\n16\n *     TreeNode *right;\n17\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n18\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n19\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n20\n * };\n21\n */\n22\nclass Solution {\n23\npublic:\n24\n    TreeNode* sortedListToBST(ListNode* head) {\n25\n        \n26\n    }\n27\n};"}
