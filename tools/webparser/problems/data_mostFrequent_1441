{"title":"428. Serialize and Deserialize N-ary Tree","description":"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nFor example, you may serialize the following 3-ary tree\n\n \n\nas [1 [3[5 6] 2 4]]. Note that this is just an example, you do not necessarily need to follow this format.\n\nOr you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.\n\n \n\nFor example, the above tree may be serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].\n\nYou do not necessarily need to follow the above-suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.\n\n \n\nExample 1:\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n\n\nExample 2:\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [1,null,3,2,4,null,5,6]\n\n\nExample 3:\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n0 <= Node.val <= 104\nThe height of the n-ary tree is less than or equal to 1000\nDo not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.","functionSig":"1\n/*\n2\n// Definition for a Node.\n3\nclass Node {\n4\npublic:\n5\n    int val;\n6\n    vector<Node*> children;\n7\n​\n8\n    Node() {}\n9\n​\n10\n    Node(int _val) {\n11\n        val = _val;\n12\n    }\n13\n​\n14\n    Node(int _val, vector<Node*> _children) {\n15\n        val = _val;\n16\n        children = _children;\n17\n    }\n18\n};\n19\n*/\n20\n​\n21\nclass Codec {\n22\npublic:\n23\n    // Encodes a tree to a single string.\n24\n    string serialize(Node* root) {\n25\n        \n26\n    }\n27\n    \n28\n    // Decodes your encoded data to tree.\n29\n    Node* deserialize(string data) {\n30\n        \n31\n    }\n32\n};\n33\n​\n34\n// Your Codec object will be instantiated and called as such:\n35\n// Codec codec;\n36\n// codec.deserialize(codec.serialize(root));"}
