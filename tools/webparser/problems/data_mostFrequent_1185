{"title":"189. Rotate Array","description":"Given an array, rotate the array to the right by k steps, where k is non-negative.\n\n \n\nExample 1:\n\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\n\nExample 2:\n\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 105\n-231 <= nums[i] <= 231 - 1\n0 <= k <= 105\n\n \n\nFollow up:\n\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem.\nCould you do it in-place with O(1) extra space?","functionSig":"1\nclass Solution {\n2\npublic:\n3\n        void reverseArray(vector<int>& a, int start, int end) {\n4\n            while (start < end) {\n5\n                int temp = a[start];\n6\n                a[start] = a[end];\n7\n                a[end] = temp;\n8\n                start++;\n9\n                end--;\n10\n            }           \n11\n        }\n12\n​\n13\n        void rotate(vector<int>& nums, int k) {\n14\n            int len = nums.size();\n15\n            if (len == 0 || k == 0) { return; }\n16\n​\n17\n            int t = len - k%len;\n18\n            reverseArray(nums, 0, t - 1);\n19\n            reverseArray(nums, t, len - 1);\n20\n            reverseArray(nums, 0, len - 1);\n21\n        }\n22\n};"}
