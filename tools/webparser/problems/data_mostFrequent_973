{"title":"2036. Maximum Alternating Subarray Sum","description":"A subarray of a 0-indexed integer array is a contiguous non-empty sequence of elements within an array.\n\nThe alternating subarray sum of a subarray that ranges from index i to j (inclusive, 0 <= i <= j < nums.length) is nums[i] - nums[i+1] + nums[i+2] - ... +/- nums[j].\n\nGiven a 0-indexed integer array nums, return the maximum alternating subarray sum of any subarray of nums.\n\n \n\nExample 1:\n\nInput: nums = [3,-1,1,2]\nOutput: 5\nExplanation:\nThe subarray [3,-1,1] has the largest alternating subarray sum.\nThe alternating subarray sum is 3 - (-1) + 1 = 5.\n\n\nExample 2:\n\nInput: nums = [2,2,2,2,2]\nOutput: 2\nExplanation:\nThe subarrays [2], [2,2,2], and [2,2,2,2,2] have the largest alternating subarray sum.\nThe alternating subarray sum of [2] is 2.\nThe alternating subarray sum of [2,2,2] is 2 - 2 + 2 = 2.\nThe alternating subarray sum of [2,2,2,2,2] is 2 - 2 + 2 - 2 + 2 = 2.\n\n\nExample 3:\n\nInput: nums = [1]\nOutput: 1\nExplanation:\nThere is only one non-empty subarray, which is [1].\nThe alternating subarray sum is 1.\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 105\n-105 <= nums[i] <= 105","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    long long maximumAlternatingSubarraySum(vector<int>& nums) {\n4\n        \n5\n    }\n6\n};"}
