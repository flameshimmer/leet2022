{"title":"1214. Two Sum BSTs","description":"Given the roots of two binary search trees, root1 and root2, return true if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer target.\n\n \n\nExample 1:\n\nInput: root1 = [2,1,4], root2 = [1,0,3], target = 5\nOutput: true\nExplanation: 2 and 3 sum up to 5.\n\n\nExample 2:\n\nInput: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18\nOutput: false\n\n\n \n\nConstraints:\n\nThe number of nodes in each tree is in the range [1, 5000].\n-109 <= Node.val, target <= 109","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    bool twoSumBSTs(TreeNode* root1, TreeNode* root2, int target) {\n15\n        \n16\n    }\n17\n};"}
