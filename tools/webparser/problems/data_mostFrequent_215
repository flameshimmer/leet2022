{"title":"307. Range Sum Query - Mutable","description":"Given an integer array nums, handle multiple queries of the following types:\n\nUpdate the value of an element in nums.\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nvoid update(int index, int val) Updates the value of nums[index] to be val.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \n\nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\n\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\n0 <= index < nums.length\n-100 <= val <= 100\n0 <= left <= right < nums.length\nAt most 3 * 104 calls will be made to update and sumRange.","functionSig":"1\nclass NumArray {\n2\npublic:\n3\n    NumArray(vector<int>& nums) {\n4\n        \n5\n    }\n6\n    \n7\n    void update(int index, int val) {\n8\n        \n9\n    }\n10\n    \n11\n    int sumRange(int left, int right) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your NumArray object will be instantiated and called as such:\n18\n * NumArray* obj = new NumArray(nums);\n19\n * obj->update(index,val);\n20\n * int param_2 = obj->sumRange(left,right);\n21\n */"}
