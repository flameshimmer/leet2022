{"title":"281. Zigzag Iterator","description":"Given two vectors of integers v1 and v2, implement an iterator to return their elements alternately.\n\nImplement the ZigzagIterator class:\n\nZigzagIterator(List<int> v1, List<int> v2) initializes the object with the two vectors v1 and v2.\nboolean hasNext() returns true if the iterator still has elements, and false otherwise.\nint next() returns the current element of the iterator and moves the iterator to the next element.\n\n \n\nExample 1:\n\nInput: v1 = [1,2], v2 = [3,4,5,6]\nOutput: [1,3,2,4,5,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].\n\n\nExample 2:\n\nInput: v1 = [1], v2 = []\nOutput: [1]\n\n\nExample 3:\n\nInput: v1 = [], v2 = [1]\nOutput: [1]\n\n\n \n\nConstraints:\n\n0 <= v1.length, v2.length <= 1000\n1 <= v1.length + v2.length <= 2000\n-231 <= v1[i], v2[i] <= 231 - 1\n\n \n\nFollow up: What if you are given k vectors? How well can your code be extended to such cases?\n\nClarification for the follow-up question:\n\nThe \"Zigzag\" order is not clearly defined and is ambiguous for k > 2 cases. If \"Zigzag\" does not look right to you, replace \"Zigzag\" with \"Cyclic\".\n\nFollow-up Example:\n\nInput: v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]\nOutput: [1,4,8,2,5,9,3,6,7]\n","functionSig":"1\nclass ZigzagIterator {\n2\npublic:\n3\n    ZigzagIterator(vector<int>& v1, vector<int>& v2) {\n4\n        \n5\n    }\n6\n​\n7\n    int next() {\n8\n        \n9\n    }\n10\n​\n11\n    bool hasNext() {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your ZigzagIterator object will be instantiated and called as such:\n18\n * ZigzagIterator i(v1, v2);\n19\n * while (i.hasNext()) cout << i.next();\n20\n */"}
