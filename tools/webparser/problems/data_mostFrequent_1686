{"title":"384. Shuffle an Array","description":"Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\n\nImplement the Solution class:\n\nSolution(int[] nums) Initializes the object with the integer array nums.\nint[] reset() Resets the array to its original configuration and returns it.\nint[] shuffle() Returns a random shuffling of the array.\n\n \n\nExample 1:\n\nInput\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 50\n-106 <= nums[i] <= 106\nAll the elements of nums are unique.\nAt most 104 calls in total will be made to reset and shuffle.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    Solution(vector<int>& nums) {\n4\n        \n5\n    }\n6\n    \n7\n    vector<int> reset() {\n8\n        \n9\n    }\n10\n    \n11\n    vector<int> shuffle() {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your Solution object will be instantiated and called as such:\n18\n * Solution* obj = new Solution(nums);\n19\n * vector<int> param_1 = obj->reset();\n20\n * vector<int> param_2 = obj->shuffle();\n21\n */"}
