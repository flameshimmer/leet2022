{"title":"1586. Binary Search Tree Iterator II","description":"Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\nboolean hasPrev() Returns true if there exists a number in the traversal to the left of the pointer, otherwise returns false.\nint prev() Moves the pointer to the left, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n\nYou may assume that next() and prev() calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when next()/prev() is called.\n\n \n\nExample 1:\n\nInput\n[\"BSTIterator\", \"next\", \"next\", \"prev\", \"next\", \"hasNext\", \"next\", \"next\", \"next\", \"hasNext\", \"hasPrev\", \"prev\", \"prev\"]\n[[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]]\nOutput\n[null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]\n\nExplanation\n// The underlined element is where the pointer currently is.\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); // state is   [3, 7, 9, 15, 20]\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 3\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7\nbSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 3\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7\nbSTIterator.hasNext(); // return true\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 9\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 15\nbSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 20\nbSTIterator.hasNext(); // return false\nbSTIterator.hasPrev(); // return true\nbSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 15\nbSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 9\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n0 <= Node.val <= 106\nAt most 105 calls will be made to hasNext, next, hasPrev, and prev.\n\n \n\nFollow up: Could you solve the problem without precalculating the values of the tree?","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass BSTIterator {\n13\npublic:\n14\n    BSTIterator(TreeNode* root) {\n15\n        \n16\n    }\n17\n    \n18\n    bool hasNext() {\n19\n        \n20\n    }\n21\n    \n22\n    int next() {\n23\n        \n24\n    }\n25\n    \n26\n    bool hasPrev() {\n27\n        \n28\n    }\n29\n    \n30\n    int prev() {\n31\n        \n32\n    }\n33\n};\n34\n​\n35\n/**\n36\n * Your BSTIterator object will be instantiated and called as such:\n37\n * BSTIterator* obj = new BSTIterator(root);\n38\n * bool param_1 = obj->hasNext();"}
