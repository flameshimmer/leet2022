{"title":"429. N-ary Tree Level Order Traversal","description":"Given an n-ary tree, return the level order traversal of its nodes' values.\n\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n\n \n\nExample 1:\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]\n\n\nExample 2:\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n\n\n \n\nConstraints:\n\nThe height of the n-ary tree is less than or equal to 1000\nThe total number of nodes is between [0, 104]","functionSig":"1\n/*\n2\n// Definition for a Node.\n3\nclass Node {\n4\npublic:\n5\n    int val;\n6\n    vector<Node*> children;\n7\n​\n8\n    Node() {}\n9\n​\n10\n    Node(int _val) {\n11\n        val = _val;\n12\n    }\n13\n​\n14\n    Node(int _val, vector<Node*> _children) {\n15\n        val = _val;\n16\n        children = _children;\n17\n    }\n18\n};\n19\n*/\n20\n​\n21\nclass Solution {\n22\npublic:\n23\n    vector<vector<int>> levelOrder(Node* root) {\n24\n        \n25\n    }\n26\n};"}
