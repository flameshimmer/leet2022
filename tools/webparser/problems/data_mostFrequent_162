{"title":"1066. Campus Bikes II","description":"On a campus represented as a 2D grid, there are n workers and m bikes, with n <= m. Each worker and bike is a 2D coordinate on this grid.\n\nWe assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.\n\nReturn the minimum possible sum of Manhattan distances between each worker and their assigned bike.\n\nThe Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.\n\n \n\nExample 1:\n\nInput: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]\nOutput: 6\nExplanation: \nWe assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.\n\n\nExample 2:\n\nInput: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]\nOutput: 4\nExplanation: \nWe first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.\n\n\nExample 3:\n\nInput: workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]\nOutput: 4995\n\n\n \n\nConstraints:\n\nn == workers.length\nm == bikes.length\n1 <= n <= m <= 10\nworkers[i].length == 2\nbikes[i].length == 2\n0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000\nAll the workers and the bikes locations are unique.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {\n4\n        \n5\n    }\n6\n};"}
