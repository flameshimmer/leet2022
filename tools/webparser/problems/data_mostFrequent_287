{"title":"1644. Lowest Common Ancestor of a Binary Tree II","description":"Given the root of a binary tree, return the lowest common ancestor (LCA) of two given nodes, p and q. If either node p or q does not exist in the tree, return null. All values of the nodes in the tree are unique.\n\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor of two nodes p and q in a binary tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)\". A descendant of a node x is a node y that is on the path from node x to some leaf node.\n\n \n\nExample 1:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\nExample 2:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.\n\nExample 3:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10\nOutput: null\nExplanation: Node 10 does not exist in the tree, so return null.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\n\n \n\nFollow up: Can you find the LCA traversing the tree, without checking nodes existence?","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n8\n * };\n9\n */\n10\nclass Solution {\n11\npublic:\n12\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n13\n        \n14\n    }\n15\n};"}
