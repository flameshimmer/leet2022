{"title":"1634. Add Two Polynomials Represented as Linked Lists","description":"A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.\n\nEach node has three attributes:\n\ncoefficient: an integer representing the number multiplier of the term. The coefficient of the term 9x4 is 9.\npower: an integer representing the exponent. The power of the term 9x4 is 4.\nnext: a pointer to the next node in the list, or null if it is the last node of the list.\n\nFor example, the polynomial 5x3 + 4x - 7 is represented by the polynomial linked list illustrated below:\n\nThe polynomial linked list must be in its standard form: the polynomial must be in strictly descending order by its power value. Also, terms with a coefficient of 0 are omitted.\n\nGiven two polynomial linked list heads, poly1 and poly2, add the polynomials together and return the head of the sum of the polynomials.\n\nPolyNode format:\n\nThe input/output format is as a list of n nodes, where each node is represented as its [coefficient, power]. For example, the polynomial 5x3 + 4x - 7 would be represented as: [[5,3],[4,1],[-7,0]].\n\n \n\nExample 1:\n\nInput: poly1 = [[1,1]], poly2 = [[1,0]]\nOutput: [[1,1],[1,0]]\nExplanation: poly1 = x. poly2 = 1. The sum is x + 1.\n\n\nExample 2:\n\nInput: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]\nOutput: [[5,2],[2,0]]\nExplanation: poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the \"0x\" term.\n\n\nExample 3:\n\nInput: poly1 = [[1,2]], poly2 = [[-1,2]]\nOutput: []\nExplanation: The sum is 0. We return an empty list.\n\n\n \n\nConstraints:\n\n0 <= n <= 104\n-109 <= PolyNode.coefficient <= 109\nPolyNode.coefficient != 0\n0 <= PolyNode.power <= 109\nPolyNode.power > PolyNode.next.power","functionSig":"1\n/**\n2\n * Definition for polynomial singly-linked list.\n3\n * struct PolyNode {\n4\n *     int coefficient, power;\n5\n *     PolyNode *next;\n6\n *     PolyNode(): coefficient(0), power(0), next(nullptr) {};\n7\n *     PolyNode(int x, int y): coefficient(x), power(y), next(nullptr) {};\n8\n *     PolyNode(int x, int y, PolyNode* next): coefficient(x), power(y), next(next) {};\n9\n * };\n10\n */\n11\n​\n12\nclass Solution {\n13\npublic:\n14\n    PolyNode* addPoly(PolyNode* poly1, PolyNode* poly2) {\n15\n        \n16\n    }\n17\n};"}
