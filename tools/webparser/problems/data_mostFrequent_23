{"title":"1570. Dot Product of Two Sparse Vectors","description":"Given two sparse vectors, compute their dot product.\n\nImplement class SparseVector:\n\nSparseVector(nums) Initializes the object with the vector nums\ndotProduct(vec) Compute the dot product between the instance of SparseVector and vec\n\nA sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.\n\nFollow up: What if only one of the vectors is sparse?\n\n \n\nExample 1:\n\nInput: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]\nOutput: 8\nExplanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)\nv1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8\n\n\nExample 2:\n\nInput: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]\nOutput: 0\nExplanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)\nv1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0\n\n\nExample 3:\n\nInput: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]\nOutput: 6\n\n\n \n\nConstraints:\n\nn == nums1.length == nums2.length\n1 <= n <= 10^5\n0 <= nums1[i], nums2[i] <= 100","functionSig":"1\nclass SparseVector {\n2\npublic:\n3\n    \n4\n    SparseVector(vector<int> &nums) {\n5\n        \n6\n    }\n7\n    \n8\n    // Return the dotProduct of two sparse vectors\n9\n    int dotProduct(SparseVector& vec) {\n10\n        \n11\n    }\n12\n};\n13\n​\n14\n// Your SparseVector object will be instantiated and called as such:\n15\n// SparseVector v1(nums1);\n16\n// SparseVector v2(nums2);\n17\n// int ans = v1.dotProduct(v2);"}
