{"title":"285. Inorder Successor in BST","description":"Given the root of a binary search tree and a node p in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return null.\n\nThe successor of a node p is the node with the smallest key greater than p.val.\n\n \n\nExample 1:\n\nInput: root = [2,1,3], p = 1\nOutput: 2\nExplanation: 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type.\n\n\nExample 2:\n\nInput: root = [5,3,6,2,4,null,null,1], p = 6\nOutput: null\nExplanation: There is no in-order successor of the current node, so the answer is null.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-105 <= Node.val <= 105\nAll Nodes will have unique values.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n8\n * };\n9\n */\n10\nclass Solution {\n11\npublic:\n12\n    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {\n13\n        \n14\n    }\n15\n};"}
