{"title":"1670. Design Front Middle Back Queue","description":"Design a queue that supports push and pop operations in the front, middle, and back.\n\nImplement the FrontMiddleBack class:\n\nFrontMiddleBack() Initializes the queue.\nvoid pushFront(int val) Adds val to the front of the queue.\nvoid pushMiddle(int val) Adds val to the middle of the queue.\nvoid pushBack(int val) Adds val to the back of the queue.\nint popFront() Removes the front element of the queue and returns it. If the queue is empty, return -1.\nint popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return -1.\nint popBack() Removes the back element of the queue and returns it. If the queue is empty, return -1.\n\nNotice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:\n\nPushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].\nPopping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].\n\n \n\nExample 1:\n\nInput:\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]\nOutput:\n[null, null, null, null, null, 1, 3, 4, 2, -1]\n\nExplanation:\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [1]\nq.pushBack(2);    // [1, 2]\nq.pushMiddle(3);  // [1, 3, 2]\nq.pushMiddle(4);  // [1, 4, 3, 2]\nq.popFront();     // return 1 -> [4, 3, 2]\nq.popMiddle();    // return 3 -> [4, 2]\nq.popMiddle();    // return 4 -> [2]\nq.popBack();      // return 2 -> []\nq.popFront();     // return -1 -> [] (The queue is empty)\n\n\n \n\nConstraints:\n\n1 <= val <= 109\nAt most 1000 calls will be made to pushFront, pushMiddle, pushBack, popFront, popMiddle, and popBack.","functionSig":"1\nclass FrontMiddleBackQueue {\n2\npublic:\n3\n    FrontMiddleBackQueue() {\n4\n        \n5\n    }\n6\n    \n7\n    void pushFront(int val) {\n8\n        \n9\n    }\n10\n    \n11\n    void pushMiddle(int val) {\n12\n        \n13\n    }\n14\n    \n15\n    void pushBack(int val) {\n16\n        \n17\n    }\n18\n    \n19\n    int popFront() {\n20\n        \n21\n    }\n22\n    \n23\n    int popMiddle() {\n24\n        \n25\n    }\n26\n    \n27\n    int popBack() {\n28\n        \n29\n    }\n30\n};\n31\n​\n32\n/**\n33\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n34\n * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();\n35\n * obj->pushFront(val);\n36\n * obj->pushMiddle(val);\n37\n * obj->pushBack(val);\n38\n * int param_4 = obj->popFront();\n39\n * int param_5 = obj->popMiddle();\n40\n * int param_6 = obj->popBack();"}
