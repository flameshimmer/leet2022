{"title":"644. Maximum Average Subarray II","description":"You are given an integer array nums consisting of n elements, and an integer k.\n\nFind a contiguous subarray whose length is greater than or equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\n\n \n\nExample 1:\n\nInput: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation:\n- When the length is 4, averages are [0.5, 12.75, 10.5] and the maximum average is 12.75\n- When the length is 5, averages are [10.4, 10.8] and the maximum average is 10.8\n- When the length is 6, averages are [9.16667] and the maximum average is 9.16667\nThe maximum average is when we choose a subarray of length 4 (i.e., the sub array [12, -5, -6, 50]) which has the max average 12.75, so we return 12.75\nNote that we do not consider the subarrays of length < 4.\n\n\nExample 2:\n\nInput: nums = [5], k = 1\nOutput: 5.00000\n\n\n \n\nConstraints:\n\nn == nums.length\n1 <= k <= n <= 104\n-104 <= nums[i] <= 104","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    double findMaxAverage(vector<int>& nums, int k) {\n4\n        \n5\n    }\n6\n};"}
