{"title":"1483. Kth Ancestor of a Tree Node","description":"You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. The root of the tree is node 0. Find the kth ancestor of a given node.\n\nThe kth ancestor of a tree node is the kth node in the path from that node to the root node.\n\nImplement the TreeAncestor class:\n\nTreeAncestor(int n, int[] parent) Initializes the object with the number of nodes in the tree and the parent array.\nint getKthAncestor(int node, int k) return the kth ancestor of the given node node. If there is no such ancestor, return -1.\n\n \n\nExample 1:\n\nInput\n[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]\nOutput\n[null, 1, 0, -1]\n\nExplanation\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor\n\n \n\nConstraints:\n\n1 <= k <= n <= 5 * 104\nparent.length == n\nparent[0] == -1\n0 <= parent[i] < n for all 0 < i < n\n0 <= node < n\nThere will be at most 5 * 104 queries.","functionSig":"1\nclass TreeAncestor {\n2\npublic:\n3\n    TreeAncestor(int n, vector<int>& parent) {\n4\n        \n5\n    }\n6\n    \n7\n    int getKthAncestor(int node, int k) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your TreeAncestor object will be instantiated and called as such:\n14\n * TreeAncestor* obj = new TreeAncestor(n, parent);\n15\n * int param_1 = obj->getKthAncestor(node,k);\n16\n */"}
