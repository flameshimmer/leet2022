{"title":"2005. Subtree Removal Game with Fibonacci Tree","description":"A Fibonacci tree is a binary tree created using the order function order(n):\n\norder(0) is the empty tree.\norder(1) is a binary tree with only one node.\norder(n) is a binary tree that consists of a root node with the left subtree as order(n - 2) and the right subtree as order(n - 1).\n\nAlice and Bob are playing a game with a Fibonacci tree with Alice staring first. On each turn, a player selects a node and removes that node and its subtree. The player that is forced to delete root loses.\n\nGiven the integer n, return true if Alice wins the game or false if Bob wins, assuming both players play optimally.\n\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n\n \n\nExample 1:\n\n\nInput: n = 3\nOutput: true\nExplanation:\nAlice takes the node 1 in the right subtree.\nBob takes either the 1 in the left subtree or the 2 in the right subtree.\nAlice takes whichever node Bob doesn't take.\nBob is forced to take the root node 3, so Bob will lose.\nReturn true because Alice wins.\n\n\nExample 2:\n\n\nInput: n = 1\nOutput: false\nExplanation:\nAlice is forced to take the root node 1, so Alice will lose.\nReturn false because Alice loses.\n\n\nExample 3:\n\n\nInput: n = 2\nOutput: true\nExplanation:\nAlice takes the node 1.\nBob is forced to take the root node 2, so Bob will lose.\nReturn true because Alice wins.\n\n\n \n\nConstraints:\n\n1 <= n <= 100","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    bool findGameWinner(int n) {\n4\n        \n5\n    }\n6\n};"}
