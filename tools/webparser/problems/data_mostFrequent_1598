{"title":"155. Min Stack","description":"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the MinStack class:\n\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\n\n \n\nExample 1:\n\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n\n \n\nConstraints:\n\n-231 <= val <= 231 - 1\nMethods pop, top and getMin operations will always be called on non-empty stacks.\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.","functionSig":"1\nclass MinStack {\n2\npublic:\n3\n    MinStack() {\n4\n        \n5\n    }\n6\n    \n7\n    void push(int val) {\n8\n        \n9\n    }\n10\n    \n11\n    void pop() {\n12\n        \n13\n    }\n14\n    \n15\n    int top() {\n16\n        \n17\n    }\n18\n    \n19\n    int getMin() {\n20\n        \n21\n    }\n22\n};\n23\n​\n24\n/**\n25\n * Your MinStack object will be instantiated and called as such:\n26\n * MinStack* obj = new MinStack();\n27\n * obj->push(val);\n28\n * obj->pop();\n29\n * int param_3 = obj->top();\n30\n * int param_4 = obj->getMin();\n31\n */"}
