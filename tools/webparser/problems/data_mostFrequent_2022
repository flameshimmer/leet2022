{"title":"418. Sentence Screen Fitting","description":"Given a rows x cols screen and a sentence represented as a list of strings, return the number of times the given sentence can be fitted on the screen.\n\nThe order of words in the sentence must remain unchanged, and a word cannot be split into two lines. A single space must separate two consecutive words in a line.\n\n \n\nExample 1:\n\nInput: sentence = [\"hello\",\"world\"], rows = 2, cols = 8\nOutput: 1\nExplanation:\nhello---\nworld---\nThe character '-' signifies an empty space on the screen.\n\n\nExample 2:\n\nInput: sentence = [\"a\", \"bcd\", \"e\"], rows = 3, cols = 6\nOutput: 2\nExplanation:\na-bcd- \ne-a---\nbcd-e-\nThe character '-' signifies an empty space on the screen.\n\n\nExample 3:\n\nInput: sentence = [\"i\",\"had\",\"apple\",\"pie\"], rows = 4, cols = 5\nOutput: 1\nExplanation:\ni-had\napple\npie-i\nhad--\nThe character '-' signifies an empty space on the screen.\n\n\n \n\nConstraints:\n\n1 <= sentence.length <= 100\n1 <= sentence[i].length <= 10\nsentence[i] consists of lowercase English letters.\n1 <= rows, cols <= 2 * 104","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int wordsTyping(vector<string>& sentence, int rows, int cols) {\n4\n        \n5\n    }\n6\n};"}
