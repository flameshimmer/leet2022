{"title":"783. Minimum Distance Between BST Nodes","description":"Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\n\n \n\nExample 1:\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\n\nExample 2:\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 100].\n0 <= Node.val <= 105\n\n \n\nNote: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    int minDiffInBST(TreeNode* root) {\n15\n        \n16\n    }\n17\n};"}
