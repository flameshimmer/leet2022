{"title":"271. Encode and Decode Strings","description":"Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.\n\nMachine 1 (sender) has the function:\n\nstring encode(vector<string> strs) {\n  // ... your code\n  return encoded_string;\n}\nMachine 2 (receiver) has the function:\nvector<string> decode(string s) {\n  //... your code\n  return strs;\n}\n\n\nSo Machine 1 does:\n\nstring encoded_string = encode(strs);\n\n\nand Machine 2 does:\n\nvector<string> strs2 = decode(encoded_string);\n\n\nstrs2 in Machine 2 should be the same as strs in Machine 1.\n\nImplement the encode and decode methods.\n\nYou are not allowed to solve the problem using any serialize methods (such as eval).\n\n \n\nExample 1:\n\nInput: dummy_input = [\"Hello\",\"World\"]\nOutput: [\"Hello\",\"World\"]\nExplanation:\nMachine 1:\nCodec encoder = new Codec();\nString msg = encoder.encode(strs);\nMachine 1 ---msg---> Machine 2\n\nMachine 2:\nCodec decoder = new Codec();\nString[] strs = decoder.decode(msg);\n\n\nExample 2:\n\nInput: dummy_input = [\"\"]\nOutput: [\"\"]\n\n\n \n\nConstraints:\n\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] contains any possible characters out of 256 valid ASCII characters.\n\n \n\nFollow up: Could you write a generalized algorithm to work on any possible set of characters?","functionSig":"1\nclass Codec {\n2\npublic:\n3\n​\n4\n    // Encodes a list of strings to a single string.\n5\n    string encode(vector<string>& strs) {\n6\n        \n7\n    }\n8\n​\n9\n    // Decodes a single string to a list of strings.\n10\n    vector<string> decode(string s) {\n11\n        \n12\n    }\n13\n};\n14\n​\n15\n// Your Codec object will be instantiated and called as such:\n16\n// Codec codec;\n17\n// codec.decode(codec.encode(strs));"}
