{"title":"676. Implement Magic Dictionary","description":"Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\n\nImplement the MagicDictionary class:\n\nMagicDictionary() Initializes the object.\nvoid buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.\nbool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.\n\n \n\nExample 1:\n\nInput\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\nOutput\n[null, null, false, true, false, false]\n\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False\n\n\n \n\nConstraints:\n\n1 <= dictionary.length <= 100\n1 <= dictionary[i].length <= 100\ndictionary[i] consists of only lower-case English letters.\nAll the strings in dictionary are distinct.\n1 <= searchWord.length <= 100\nsearchWord consists of only lower-case English letters.\nbuildDict will be called only once before search.\nAt most 100 calls will be made to search.","functionSig":"1\nclass MagicDictionary {\n2\npublic:\n3\n    MagicDictionary() {\n4\n        \n5\n    }\n6\n    \n7\n    void buildDict(vector<string> dictionary) {\n8\n        \n9\n    }\n10\n    \n11\n    bool search(string searchWord) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your MagicDictionary object will be instantiated and called as such:\n18\n * MagicDictionary* obj = new MagicDictionary();\n19\n * obj->buildDict(dictionary);\n20\n * bool param_2 = obj->search(searchWord);\n21\n */"}
