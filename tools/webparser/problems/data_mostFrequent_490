{"title":"549. Binary Tree Longest Consecutive Sequence II","description":"Given the root of a binary tree, return the length of the longest consecutive path in the tree.\n\nA consecutive path is a path where the values of the consecutive nodes in the path differ by one. This path can be either increasing or decreasing.\n\nFor example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid.\n\nOn the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.\n\n \n\nExample 1:\n\nInput: root = [1,2,3]\nOutput: 2\nExplanation: The longest consecutive path is [1, 2] or [2, 1].\n\n\nExample 2:\n\nInput: root = [2,1,3]\nOutput: 3\nExplanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-3 * 104 <= Node.val <= 3 * 104","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    int longestConsecutive(TreeNode* root) {\n15\n        \n16\n    }\n17\n};"}
