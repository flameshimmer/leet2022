{"title":"862. Shortest Subarray with Sum at Least K","description":"Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.\n\nA subarray is a contiguous part of an array.\n\n \n\nExample 1:\n\nInput: nums = [1], k = 1\nOutput: 1\n\n\nExample 2:\n\nInput: nums = [1,2], k = 4\nOutput: -1\n\n\nExample 3:\n\nInput: nums = [2,-1,2], k = 3\nOutput: 3\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 105\n-105 <= nums[i] <= 105\n1 <= k <= 109","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int shortestSubarray(vector<int>& nums, int k) {\n4\n        \n5\n    }\n6\n};"}
