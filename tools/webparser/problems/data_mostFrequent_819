{"title":"641. Design Circular Deque","description":"Design your implementation of the circular double-ended queue (deque).\n\nImplement the MyCircularDeque class:\n\nMyCircularDeque(int k) Initializes the deque with a maximum size of k.\nboolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.\nboolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.\nboolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.\nboolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.\nint getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.\nint getRear() Returns the last item from Deque. Returns -1 if the deque is empty.\nboolean isEmpty() Returns true if the deque is empty, or false otherwise.\nboolean isFull() Returns true if the deque is full, or false otherwise.\n\n \n\nExample 1:\n\nInput\n[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 2, true, true, true, 4]\n\nExplanation\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4\n\n\n \n\nConstraints:\n\n1 <= k <= 1000\n0 <= value <= 1000\nAt most 2000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, isFull.","functionSig":"1\nclass MyCircularDeque {\n2\npublic:\n3\n    MyCircularDeque(int k) {\n4\n        \n5\n    }\n6\n    \n7\n    bool insertFront(int value) {\n8\n        \n9\n    }\n10\n    \n11\n    bool insertLast(int value) {\n12\n        \n13\n    }\n14\n    \n15\n    bool deleteFront() {\n16\n        \n17\n    }\n18\n    \n19\n    bool deleteLast() {\n20\n        \n21\n    }\n22\n    \n23\n    int getFront() {\n24\n        \n25\n    }\n26\n    \n27\n    int getRear() {\n28\n        \n29\n    }\n30\n    \n31\n    bool isEmpty() {\n32\n        \n33\n    }\n34\n    \n35\n    bool isFull() {\n36\n        \n37\n    }\n38\n};\n39\n​\n40\n/**"}
