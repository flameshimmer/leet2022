{"title":"732. My Calendar III","description":"A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\n\nYou are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.\n\nImplement the MyCalendarThree class:\n\nMyCalendarThree() Initializes the object.\nint book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.\n\n \n\nExample 1:\n\nInput\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, 1, 1, 2, 3, 3, 3]\n\nExplanation\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.\nmyCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3\n\n\n \n\nConstraints:\n\n0 <= start < end <= 109\nAt most 400 calls will be made to book.","functionSig":"1\nclass MyCalendarThree {\n2\npublic:\n3\n    MyCalendarThree() {\n4\n        \n5\n    }\n6\n    \n7\n    int book(int start, int end) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your MyCalendarThree object will be instantiated and called as such:\n14\n * MyCalendarThree* obj = new MyCalendarThree();\n15\n * int param_1 = obj->book(start,end);\n16\n */"}
