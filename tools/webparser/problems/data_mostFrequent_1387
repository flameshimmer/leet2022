{"title":"2277. Closest Node to Path in Tree","description":"You are given a positive integer n representing the number of nodes in a tree, numbered from 0 to n - 1 (inclusive). You are also given a 2D integer array edges of length n - 1, where edges[i] = [node1i, node2i] denotes that there is a bidirectional edge connecting node1i and node2i in the tree.\n\nYou are given a 0-indexed integer array query of length m where query[i] = [starti, endi, nodei] means that for the ith query, you are tasked with finding the node on the path from starti to endi that is closest to nodei.\n\nReturn an integer array answer of length m, where answer[i] is the answer to the ith query.\n\n \n\nExample 1:\n\nInput: n = 7, edges = [[0,1],[0,2],[0,3],[1,4],[2,5],[2,6]], query = [[5,3,4],[5,3,6]]\nOutput: [0,2]\nExplanation:\nThe path from node 5 to node 3 consists of the nodes 5, 2, 0, and 3.\nThe distance between node 4 and node 0 is 2.\nNode 0 is the node on the path closest to node 4, so the answer to the first query is 0.\nThe distance between node 6 and node 2 is 1.\nNode 2 is the node on the path closest to node 6, so the answer to the second query is 2.\n\n\nExample 2:\n\nInput: n = 3, edges = [[0,1],[1,2]], query = [[0,1,2]]\nOutput: [1]\nExplanation:\nThe path from node 0 to node 1 consists of the nodes 0, 1.\nThe distance between node 2 and node 1 is 1.\nNode 1 is the node on the path closest to node 2, so the answer to the first query is 1.\n\n\nExample 3:\n\nInput: n = 3, edges = [[0,1],[1,2]], query = [[0,0,0]]\nOutput: [0]\nExplanation:\nThe path from node 0 to node 0 consists of the node 0.\nSince 0 is the only node on the path, the answer to the first query is 0.\n\n \n\nConstraints:\n\n1 <= n <= 1000\nedges.length == n - 1\nedges[i].length == 2\n0 <= node1i, node2i <= n - 1\nnode1i != node2i\n1 <= query.length <= 1000\nquery[i].length == 3\n0 <= starti, endi, nodei <= n - 1\nThe graph is a tree.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    vector<int> closestNode(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {\n4\n        \n5\n    }\n6\n};"}
