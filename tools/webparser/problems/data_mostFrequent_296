{"title":"2046. Sort Linked List Already Sorted Using Absolute Values","description":"Given the head of a singly linked list that is sorted in non-decreasing order using the absolute values of its nodes, return the list sorted in non-decreasing order using the actual values of its nodes.\n\n \n\nExample 1:\n\nInput: head = [0,2,-5,5,10,-10]\nOutput: [-10,-5,0,2,5,10]\nExplanation:\nThe list sorted in non-descending order using the absolute values of the nodes is [0,2,-5,5,10,-10].\nThe list sorted in non-descending order using the actual values is [-10,-5,0,2,5,10].\n\n\nExample 2:\n\nInput: head = [0,1,2]\nOutput: [0,1,2]\nExplanation:\nThe linked list is already sorted in non-decreasing order.\n\n\nExample 3:\n\nInput: head = [1]\nOutput: [1]\nExplanation:\nThe linked list is already sorted in non-decreasing order.\n\n\n \n\nConstraints:\n\nThe number of nodes in the list is the range [1, 105].\n-5000 <= Node.val <= 5000\nhead is sorted in non-decreasing order using the absolute value of its nodes.\n\n \n\nFollow up:\nCan you think of a solution with O(n) time complexity?","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\nclass Solution {\n12\npublic:\n13\n    ListNode* sortLinkedList(ListNode* head) {\n14\n        \n15\n    }\n16\n};"}
