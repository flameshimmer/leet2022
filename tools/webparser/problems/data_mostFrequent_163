{"title":"1139. Largest 1-Bordered Square","description":"Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.\n\n \n\nExample 1:\n\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 9\n\n\nExample 2:\n\nInput: grid = [[1,1,0,0]]\nOutput: 1\n\n\n \n\nConstraints:\n\n1 <= grid.length <= 100\n1 <= grid[0].length <= 100\ngrid[i][j] is 0 or 1","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int largest1BorderedSquare(vector<vector<int>>& grid) {\n4\n        \n5\n    }\n6\n};"}
