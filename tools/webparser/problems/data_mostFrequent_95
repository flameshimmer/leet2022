{"title":"346. Moving Average from Data Stream","description":"Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.\n\nImplement the MovingAverage class:\n\nMovingAverage(int size) Initializes the object with the size of the window size.\ndouble next(int val) Returns the moving average of the last size values of the stream.\n\n \n\nExample 1:\n\nInput\n[\"MovingAverage\", \"next\", \"next\", \"next\", \"next\"]\n[[3], [1], [10], [3], [5]]\nOutput\n[null, 1.0, 5.5, 4.66667, 6.0]\n\nExplanation\nMovingAverage movingAverage = new MovingAverage(3);\nmovingAverage.next(1); // return 1.0 = 1 / 1\nmovingAverage.next(10); // return 5.5 = (1 + 10) / 2\nmovingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3\nmovingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3\n\n\n \n\nConstraints:\n\n1 <= size <= 1000\n-105 <= val <= 105\nAt most 104 calls will be made to next.","functionSig":"1\nclass MovingAverage {\n2\npublic:\n3\n    MovingAverage(int size) {\n4\n        \n5\n    }\n6\n    \n7\n    double next(int val) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your MovingAverage object will be instantiated and called as such:\n14\n * MovingAverage* obj = new MovingAverage(size);\n15\n * double param_1 = obj->next(val);\n16\n */"}
