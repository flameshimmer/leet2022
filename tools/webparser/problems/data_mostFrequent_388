{"title":"1825. Finding MK Average","description":"You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.\n\nThe MKAverage can be calculated using these steps:\n\nIf the number of the elements in the stream is less than m you should consider the MKAverage to be -1. Otherwise, copy the last m elements of the stream to a separate container.\nRemove the smallest k elements and the largest k elements from the container.\nCalculate the average value for the rest of the elements rounded down to the nearest integer.\n\nImplement the MKAverage class:\n\nMKAverage(int m, int k) Initializes the MKAverage object with an empty stream and the two integers m and k.\nvoid addElement(int num) Inserts a new element num into the stream.\nint calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.\n\n \n\nExample 1:\n\nInput\n[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\nOutput\n[null, null, null, -1, null, 3, null, null, null, 5]\n\nExplanation\nMKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                          // After removing smallest and largest 1 element the container will be [3].\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                          // After removing smallest and largest 1 element the container will be [5].\n                          // The average of [5] equals 5/1 = 5, return 5\n\n\n \n\nConstraints:\n\n3 <= m <= 105\n1 <= k*2 < m\n1 <= num <= 105\nAt most 105 calls will be made to addElement and calculateMKAverage.","functionSig":"1\nclass MKAverage {\n2\npublic:\n3\n    MKAverage(int m, int k) {\n4\n        \n5\n    }\n6\n    \n7\n    void addElement(int num) {\n8\n        \n9\n    }\n10\n    \n11\n    int calculateMKAverage() {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your MKAverage object will be instantiated and called as such:\n18\n * MKAverage* obj = new MKAverage(m, k);\n19\n * obj->addElement(num);\n20\n * int param_2 = obj->calculateMKAverage();\n21\n */"}
