{"title":"410. Split Array Largest Sum","description":"Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.\n\nWrite an algorithm to minimize the largest sum among these m subarrays.\n\n \n\nExample 1:\n\nInput: nums = [7,2,5,10,8], m = 2\nOutput: 18\nExplanation:\nThere are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8],\nwhere the largest sum among the two subarrays is only 18.\n\n\nExample 2:\n\nInput: nums = [1,2,3,4,5], m = 2\nOutput: 9\n\n\nExample 3:\n\nInput: nums = [1,4,4], m = 3\nOutput: 4\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 1000\n0 <= nums[i] <= 106\n1 <= m <= min(50, nums.length)","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int splitArray(vector<int>& nums, int m) {\n4\n        \n5\n    }\n6\n};"}
