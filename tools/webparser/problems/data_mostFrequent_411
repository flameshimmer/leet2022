{"title":"302. Smallest Rectangle Enclosing Black Pixels","description":"You are given an m x n binary matrix image where 0 represents a white pixel and 1 represents a black pixel.\n\nThe black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.\n\nGiven two integers x and y that represents the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.\n\nYou must write an algorithm with less than O(mn) runtime complexity\n\n \n\nExample 1:\n\nInput: image = [[\"0\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"0\"]], x = 0, y = 2\nOutput: 6\n\n\nExample 2:\n\nInput: image = [[\"1\"]], x = 0, y = 0\nOutput: 1\n\n\n \n\nConstraints:\n\nm == image.length\nn == image[i].length\n1 <= m, n <= 100\nimage[i][j] is either '0' or '1'.\n0 <= x < m\n0 <= y < n\nimage[x][y] == '1'.\nThe black pixels in the image only form one component.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int minArea(vector<vector<char>>& image, int x, int y) {\n4\n        \n5\n    }\n6\n};"}
