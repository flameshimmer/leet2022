{"title":"1172. Dinner Plate Stacks","description":"You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.\n\nImplement the DinnerPlates class:\n\nDinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks capacity.\nvoid push(int val) Pushes the given integer val into the leftmost stack with a size less than capacity.\nint pop() Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty.\nint popAtStack(int index) Returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty.\n\n \n\nExample 1:\n\nInput\n[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]\nOutput\n[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]\n\nExplanation: \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2  4\n                                           1  3  5\n                                           ﹈ ﹈ ﹈\nD.popAtStack(0);   // Returns 2.  The stacks are now:     4\n                                                       1  3  5\n                                                       ﹈ ﹈ ﹈\nD.push(20);        // The stacks are now: 20  4\n                                           1  3  5\n                                           ﹈ ﹈ ﹈\nD.push(21);        // The stacks are now: 20  4 21\n                                           1  3  5\n                                           ﹈ ﹈ ﹈\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n                                                        1  3  5\n                                                        ﹈ ﹈ ﹈\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n                                                        1  3  5\n                                                        ﹈ ﹈ ﹈ \nD.pop()            // Returns 5.  The stacks are now:      4\n                                                        1  3 \n                                                        ﹈ ﹈  \nD.pop()            // Returns 4.  The stacks are now:   1  3 \n                                                        ﹈ ﹈   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        ﹈   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks.\n\n\n \n\nConstraints:\n\n1 <= capacity <= 2 * 104\n1 <= val <= 2 * 104\n0 <= index <= 105\nAt most 2 * 105 calls will be made to push, pop, and popAtStack.","functionSig":"1\nclass DinnerPlates {\n2\npublic:\n3\n    DinnerPlates(int capacity) {\n4\n        \n5\n    }\n6\n    \n7\n    void push(int val) {\n8\n        \n9\n    }\n10\n    \n11\n    int pop() {\n12\n        \n13\n    }\n14\n    \n15\n    int popAtStack(int index) {\n16\n        \n17\n    }\n18\n};\n19\n​\n20\n/**\n21\n * Your DinnerPlates object will be instantiated and called as such:\n22\n * DinnerPlates* obj = new DinnerPlates(capacity);\n23\n * obj->push(val);\n24\n * int param_2 = obj->pop();\n25\n * int param_3 = obj->popAtStack(index);\n26\n */"}
