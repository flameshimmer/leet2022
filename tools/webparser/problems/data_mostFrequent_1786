{"title":"156. Binary Tree Upside Down","description":"Given the root of a binary tree, turn the tree upside down and return the new root.\n\nYou can turn a binary tree upside down with the following steps:\n\nThe original left child becomes the new root.\nThe original root becomes the new right child.\nThe original right child becomes the new left child.\n\nThe mentioned steps are done level by level. It is guaranteed that every right node has a sibling (a left node with the same parent) and has no children.\n\n \n\nExample 1:\n\nInput: root = [1,2,3,4,5]\nOutput: [4,5,2,null,null,3,1]\n\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree will be in the range [0, 10].\n1 <= Node.val <= 10\nEvery right node in the tree has a sibling (a left node that shares the same parent).\nEvery right node in the tree has no children.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    TreeNode* upsideDownBinaryTree(TreeNode* root) {\n15\n        \n16\n    }\n17\n};"}
