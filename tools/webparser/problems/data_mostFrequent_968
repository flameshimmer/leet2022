{"title":"439. Ternary Expression Parser","description":"Given a string expression representing arbitrarily nested ternary expressions, evaluate the expression, and return the result of it.\n\nYou can always assume that the given expression is valid and only contains digits, '?', ':', 'T', and 'F' where 'T' is true and 'F' is false. All the numbers in the expression are one-digit numbers (i.e., in the range [0, 9]).\n\nThe conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, 'T' or 'F'.\n\n \n\nExample 1:\n\nInput: expression = \"T?2:3\"\nOutput: \"2\"\nExplanation: If true, then result is 2; otherwise result is 3.\n\n\nExample 2:\n\nInput: expression = \"F?1:T?4:5\"\nOutput: \"4\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(F ? 1 : (T ? 4 : 5))\" --> \"(F ? 1 : 4)\" --> \"4\"\nor \"(F ? 1 : (T ? 4 : 5))\" --> \"(T ? 4 : 5)\" --> \"4\"\n\n\nExample 3:\n\nInput: expression = \"T?T?F:5:3\"\nOutput: \"F\"\nExplanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\"(T ? (T ? F : 5) : 3)\" --> \"(T ? F : 3)\" --> \"F\"\n\"(T ? (T ? F : 5) : 3)\" --> \"(T ? F : 5)\" --> \"F\"\n\n\n \n\nConstraints:\n\n5 <= expression.length <= 104\nexpression consists of digits, 'T', 'F', '?', and ':'.\nIt is guaranteed that expression is a valid ternary expression and that each number is a one-digit number.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    string parseTernary(string expression) {\n4\n        \n5\n    }\n6\n};"}
