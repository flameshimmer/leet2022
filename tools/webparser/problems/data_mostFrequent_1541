{"title":"1381. Design a Stack With Increment Operation","description":"Design a stack which supports the following operations.\n\nImplement the CustomStack class:\n\nCustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack or do nothing if the stack reached the maxSize.\nvoid push(int x) Adds x to the top of the stack if the stack hasn't reached the maxSize.\nint pop() Pops and returns the top of stack or -1 if the stack is empty.\nvoid inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, just increment all the elements in the stack.\n\n \n\nExample 1:\n\nInput\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\nOutput\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack customStack = new CustomStack(3); // Stack is Empty []\ncustomStack.push(1);                          // stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.push(3);                          // stack becomes [1, 2, 3]\ncustomStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4\ncustomStack.increment(5, 100);                // stack becomes [101, 102, 103]\ncustomStack.increment(2, 100);                // stack becomes [201, 202, 103]\ncustomStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\ncustomStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]\ncustomStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []\ncustomStack.pop();                            // return -1 --> Stack is empty return -1.\n\n\n \n\nConstraints:\n\n1 <= maxSize <= 1000\n1 <= x <= 1000\n1 <= k <= 1000\n0 <= val <= 100\nAt most 1000 calls will be made to each method of increment, push and pop each separately.","functionSig":"1\nclass CustomStack {\n2\npublic:\n3\n    CustomStack(int maxSize) {\n4\n        \n5\n    }\n6\n    \n7\n    void push(int x) {\n8\n        \n9\n    }\n10\n    \n11\n    int pop() {\n12\n        \n13\n    }\n14\n    \n15\n    void increment(int k, int val) {\n16\n        \n17\n    }\n18\n};\n19\n​\n20\n/**\n21\n * Your CustomStack object will be instantiated and called as such:\n22\n * CustomStack* obj = new CustomStack(maxSize);\n23\n * obj->push(x);\n24\n * int param_2 = obj->pop();\n25\n * obj->increment(k,val);\n26\n */"}
