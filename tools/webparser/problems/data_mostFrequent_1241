{"title":"1660. Correct a Binary Tree","description":"You have a binary tree with a small defect. There is exactly one invalid node where its right child incorrectly points to another node at the same depth but to the invalid node's right.\n\nGiven the root of the binary tree with this defect, root, return the root of the binary tree after removing this invalid node and every node underneath it (minus the node it incorrectly points to).\n\nCustom testing:\n\nThe test input is read as 3 lines:\n\nTreeNode root\nint fromNode (not available to correctBinaryTree)\nint toNode (not available to correctBinaryTree)\n\nAfter the binary tree rooted at root is parsed, the TreeNode with value of fromNode will have its right child pointer pointing to the TreeNode with a value of toNode. Then, root is passed to correctBinaryTree.\n\n \n\nExample 1:\n\nInput: root = [1,2,3], fromNode = 2, toNode = 3\nOutput: [1,null,3]\nExplanation: The node with value 2 is invalid, so remove it.\n\n\nExample 2:\n\nInput: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4\nOutput: [8,3,1,null,null,9,4,null,null,5,6]\nExplanation: The node with value 7 is invalid, so remove it and the node underneath it, node 2.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [3, 104].\n-109 <= Node.val <= 109\nAll Node.val are unique.\nfromNode != toNode\nfromNode and toNode will exist in the tree and will be on the same depth.\ntoNode is to the right of fromNode.\nfromNode.right is null in the initial tree from the test data.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    TreeNode* correctBinaryTree(TreeNode* root) {\n15\n        \n16\n    }\n17\n};"}
