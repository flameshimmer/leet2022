{"title":"1533. Find the Index of the Large Integer","description":"We have an integer array arr, where all the integers in arr are equal except for one integer which is larger than the rest of the integers. You will not be given direct access to the array, instead, you will have an API ArrayReader which have the following functions:\n\nint compareSub(int l, int r, int x, int y): where 0 <= l, r, x, y < ArrayReader.length(), l <= r and x <= y. The function compares the sum of sub-array arr[l..r] with the sum of the sub-array arr[x..y] and returns:\n1 if arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y].\n0 if arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y].\n-1 if arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y].\nint length(): Returns the size of the array.\n\nYou are allowed to call compareSub() 20 times at most. You can assume both functions work in O(1) time.\n\nReturn the index of the array arr which has the largest integer.\n\n \n\nExample 1:\n\nInput: arr = [7,7,7,7,10,7,7,7]\nOutput: 4\nExplanation: The following calls to the API\nreader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]).\nThus we know that arr[0] and arr[1] doesn't contain the largest element.\nreader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].\nreader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array.\nNotice that we made only 3 calls, so the answer is valid.\n\n\nExample 2:\n\nInput: nums = [6,6,12]\nOutput: 2\n\n\n \n\nConstraints:\n\n2 <= arr.length <= 5 * 105\n1 <= arr[i] <= 100\nAll elements of arr are equal except for one element which is larger than all other elements.\n\n \n\nFollow up:\n\nWhat if there are two numbers in arr that are bigger than all other numbers?\nWhat if there is one number that is bigger than other numbers and one number that is smaller than other numbers?","functionSig":"1\n/**\n2\n * // This is the ArrayReader's API interface.\n3\n * // You should not implement it, or speculate about its implementation\n4\n * class ArrayReader {\n5\n *   public:\n6\n *     // Compares the sum of arr[l..r] with the sum of arr[x..y] \n7\n *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])\n8\n *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])\n9\n *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])\n10\n *     int compareSub(int l, int r, int x, int y);\n11\n *\n12\n *     // Returns the length of the array\n13\n *     int length();\n14\n * };\n15\n */\n16\n​\n17\nclass Solution {\n18\npublic:\n19\n    int getIndex(ArrayReader &reader) {\n20\n        \n21\n    }\n22\n};"}
