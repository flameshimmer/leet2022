{"title":"673. Number of Longest Increasing Subsequence","description":"Given an integer array nums, return the number of longest increasing subsequences.\n\nNotice that the sequence has to be strictly increasing.\n\n \n\nExample 1:\n\nInput: nums = [1,3,5,4,7]\nOutput: 2\nExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n\n\nExample 2:\n\nInput: nums = [2,2,2,2,2]\nOutput: 5\nExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.\n\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 2000\n-106 <= nums[i] <= 106","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int findNumberOfLIS(vector<int>& nums) {\n4\n        \n5\n    }\n6\n};"}
