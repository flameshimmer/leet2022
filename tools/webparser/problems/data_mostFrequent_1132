{"title":"359. Logger Rate Limiter","description":"Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp t will prevent other identical messages from being printed until timestamp t + 10).\n\nAll messages will come in chronological order. Several messages may arrive at the same timestamp.\n\nImplement the Logger class:\n\nLogger() Initializes the logger object.\nbool shouldPrintMessage(int timestamp, string message) Returns true if the message should be printed in the given timestamp, otherwise returns false.\n\n \n\nExample 1:\n\nInput\n[\"Logger\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\", \"shouldPrintMessage\"]\n[[], [1, \"foo\"], [2, \"bar\"], [3, \"foo\"], [8, \"bar\"], [10, \"foo\"], [11, \"foo\"]]\nOutput\n[null, true, true, false, false, false, true]\n\nExplanation\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1, \"foo\");  // return true, next allowed timestamp for \"foo\" is 1 + 10 = 11\nlogger.shouldPrintMessage(2, \"bar\");  // return true, next allowed timestamp for \"bar\" is 2 + 10 = 12\nlogger.shouldPrintMessage(3, \"foo\");  // 3 < 11, return false\nlogger.shouldPrintMessage(8, \"bar\");  // 8 < 12, return false\nlogger.shouldPrintMessage(10, \"foo\"); // 10 < 11, return false\nlogger.shouldPrintMessage(11, \"foo\"); // 11 >= 11, return true, next allowed timestamp for \"foo\" is 11 + 10 = 21\n\n\n \n\nConstraints:\n\n0 <= timestamp <= 109\nEvery timestamp will be passed in non-decreasing order (chronological order).\n1 <= message.length <= 30\nAt most 104 calls will be made to shouldPrintMessage.","functionSig":"1\nclass Logger {\n2\npublic:\n3\n    Logger() {\n4\n        \n5\n    }\n6\n    \n7\n    bool shouldPrintMessage(int timestamp, string message) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your Logger object will be instantiated and called as such:\n14\n * Logger* obj = new Logger();\n15\n * bool param_1 = obj->shouldPrintMessage(timestamp,message);\n16\n */"}
