{"title":"852. Peak Index in a Mountain Array","description":"Let's call an array arr a mountain if the following properties hold:\n\narr.length >= 3\nThere exists some i with 0 < i < arr.length - 1 such that:\narr[0] < arr[1] < ... arr[i-1] < arr[i]\narr[i] > arr[i+1] > ... > arr[arr.length - 1]\n\nGiven an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].\n\n \n\nExample 1:\n\nInput: arr = [0,1,0]\nOutput: 1\n\n\nExample 2:\n\nInput: arr = [0,2,1,0]\nOutput: 1\n\n\nExample 3:\n\nInput: arr = [0,10,5,2]\nOutput: 1\n\n\n \n\nConstraints:\n\n3 <= arr.length <= 104\n0 <= arr[i] <= 106\narr is guaranteed to be a mountain array.\n\n \n\nFollow up: Finding the O(n) is straightforward, could you find an O(log(n)) solution?","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int peakIndexInMountainArray(vector<int>& arr) {\n4\n        \n5\n    }\n6\n};"}
