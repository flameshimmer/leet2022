{"title":"1151. Minimum Swaps to Group All 1's Together","description":"Given a binary array data, return the minimum number of swaps required to group all 1’s present in the array together in any place in the array.\n\n \n\nExample 1:\n\nInput: data = [1,0,1,0,1]\nOutput: 1\nExplanation: There are 3 ways to group all 1's together:\n[1,1,1,0,0] using 1 swap.\n[0,1,1,1,0] using 2 swaps.\n[0,0,1,1,1] using 1 swap.\nThe minimum is 1.\n\n\nExample 2:\n\nInput: data = [0,0,0,1,0]\nOutput: 0\nExplanation: Since there is only one 1 in the array, no swaps are needed.\n\n\nExample 3:\n\nInput: data = [1,0,1,0,1,0,0,1,1,0,1]\nOutput: 3\nExplanation: One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].\n\n\n \n\nConstraints:\n\n1 <= data.length <= 105\ndata[i] is either 0 or 1.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int minSwaps(vector<int>& data) {\n4\n        \n5\n    }\n6\n};"}
