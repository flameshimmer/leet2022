{"title":"19. Remove Nth Node From End of List","description":"Given the head of a linked list, remove the nth node from the end of the list and return its head.\n\n \n\nExample 1:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\n\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\n\n\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]\n\n\n \n\nConstraints:\n\nThe number of nodes in the list is sz.\n1 <= sz <= 30\n0 <= Node.val <= 100\n1 <= n <= sz\n\n \n\nFollow up: Could you do this in one pass?","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\nclass Solution {\n12\npublic:\n13\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n14\n        \n15\n    }\n16\n};"}
