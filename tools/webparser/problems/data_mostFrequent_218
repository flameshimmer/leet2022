{"title":"727. Minimum Window Subsequence","description":"Given strings s1 and s2, return the minimum contiguous substring part of s1, so that s2 is a subsequence of the part.\n\nIf there is no such window in s1 that covers all characters in s2, return the empty string \"\". If there are multiple such minimum-length windows, return the one with the left-most starting index.\n\n \n\nExample 1:\n\nInput: s1 = \"abcdebdde\", s2 = \"bde\"\nOutput: \"bcde\"\nExplanation: \n\"bcde\" is the answer because it occurs before \"bdde\" which has the same length.\n\"deb\" is not a smaller window because the elements of s2 in the window must occur in order.\n\n\nExample 2:\n\nInput: s1 = \"jmeqksfrsdcmsiwvaovztaqenprpvnbstl\", s2 = \"u\"\nOutput: \"\"\n\n\n \n\nConstraints:\n\n1 <= s1.length <= 2 * 104\n1 <= s2.length <= 100\ns1 and s2 consist of lowercase English letters.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    string minWindow(string s1, string s2) {\n4\n        \n5\n    }\n6\n};"}
