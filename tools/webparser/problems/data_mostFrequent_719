{"title":"1147. Longest Chunked Palindrome Decomposition","description":"You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:\n\nsubtexti is a non-empty string.\nThe concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).\nsubtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).\n\nReturn the largest possible value of k.\n\n \n\nExample 1:\n\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n\n\nExample 2:\n\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".\n\n\nExample 3:\n\nInput: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".\n\n\n \n\nConstraints:\n\n1 <= text.length <= 1000\ntext consists only of lowercase English characters.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int longestDecomposition(string text) {\n4\n        \n5\n    }\n6\n};"}
