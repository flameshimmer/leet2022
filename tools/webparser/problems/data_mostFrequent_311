{"title":"325. Maximum Size Subarray Sum Equals k","description":"Given an integer array nums and an integer k, return the maximum length of a subarray that sums to k. If there is not one, return 0 instead.\n\n \n\nExample 1:\n\nInput: nums = [1,-1,5,-2,3], k = 3\nOutput: 4\nExplanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.\n\n\nExample 2:\n\nInput: nums = [-2,-1,2,1], k = 1\nOutput: 2\nExplanation: The subarray [-1, 2] sums to 1 and is the longest.\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 2 * 105\n-104 <= nums[i] <= 104\n-109 <= k <= 109","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int maxSubArrayLen(vector<int>& nums, int k) {\n4\n        \n5\n    }\n6\n};"}
