{"title":"716. Max Stack","description":"Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.\n\nImplement the MaxStack class:\n\nMaxStack() Initializes the stack object.\nvoid push(int x) Pushes element x onto the stack.\nint pop() Removes the element on top of the stack and returns it.\nint top() Gets the element on the top of the stack without removing it.\nint peekMax() Retrieves the maximum element in the stack without removing it.\nint popMax() Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the top-most one.\n\n \n\nExample 1:\n\nInput\n[\"MaxStack\", \"push\", \"push\", \"push\", \"top\", \"popMax\", \"top\", \"peekMax\", \"pop\", \"top\"]\n[[], [5], [1], [5], [], [], [], [], [], []]\nOutput\n[null, null, null, null, 5, 5, 1, 5, 1, 5]\n\nExplanation\nMaxStack stk = new MaxStack();\nstk.push(5);   // [5] the top of the stack and the maximum number is 5.\nstk.push(1);   // [5, 1] the top of the stack is 1, but the maximum is 5.\nstk.push(5);   // [5, 1, 5] the top of the stack is 5, which is also the maximum, because it is the top most one.\nstk.top();     // return 5, [5, 1, 5] the stack did not change.\nstk.popMax();  // return 5, [5, 1] the stack is changed now, and the top is different from the max.\nstk.top();     // return 1, [5, 1] the stack did not change.\nstk.peekMax(); // return 5, [5, 1] the stack did not change.\nstk.pop();     // return 1, [5] the top of the stack and the max element is now 5.\nstk.top();     // return 5, [5] the stack did not change.\n\n\n \n\nConstraints:\n\n-107 <= x <= 107\nAt most 104 calls will be made to push, pop, top, peekMax, and popMax.\nThere will be at least one element in the stack when pop, top, peekMax, or popMax is called.\n\n \n\nFollow up: Could you come up with a solution that supports O(1) for each top call and O(logn) for each other call? ","functionSig":"1\nclass MaxStack {\n2\npublic:\n3\n    MaxStack() {\n4\n        \n5\n    }\n6\n    \n7\n    void push(int x) {\n8\n        \n9\n    }\n10\n    \n11\n    int pop() {\n12\n        \n13\n    }\n14\n    \n15\n    int top() {\n16\n        \n17\n    }\n18\n    \n19\n    int peekMax() {\n20\n        \n21\n    }\n22\n    \n23\n    int popMax() {\n24\n        \n25\n    }\n26\n};\n27\n​\n28\n/**\n29\n * Your MaxStack object will be instantiated and called as such:\n30\n * MaxStack* obj = new MaxStack();\n31\n * obj->push(x);\n32\n * int param_2 = obj->pop();\n33\n * int param_3 = obj->top();\n34\n * int param_4 = obj->peekMax();\n35\n * int param_5 = obj->popMax();\n36\n */"}
