{"title":"244. Shortest Word Distance II","description":"Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\n\nImplement the WordDistance class:\n\nWordDistance(String[] wordsDict) initializes the object with the strings array wordsDict.\nint shortest(String word1, String word2) returns the shortest distance between word1 and word2 in the array wordsDict.\n\n \n\nExample 1:\n\nInput\n[\"WordDistance\", \"shortest\", \"shortest\"]\n[[[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]], [\"coding\", \"practice\"], [\"makes\", \"coding\"]]\nOutput\n[null, 3, 1]\n\nExplanation\nWordDistance wordDistance = new WordDistance([\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]);\nwordDistance.shortest(\"coding\", \"practice\"); // return 3\nwordDistance.shortest(\"makes\", \"coding\");    // return 1\n\n\n \n\nConstraints:\n\n1 <= wordsDict.length <= 3 * 104\n1 <= wordsDict[i].length <= 10\nwordsDict[i] consists of lowercase English letters.\nword1 and word2 are in wordsDict.\nword1 != word2\nAt most 5000 calls will be made to shortest.","functionSig":"1\nclass WordDistance {\n2\npublic:\n3\n    WordDistance(vector<string>& wordsDict) {\n4\n        \n5\n    }\n6\n    \n7\n    int shortest(string word1, string word2) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your WordDistance object will be instantiated and called as such:\n14\n * WordDistance* obj = new WordDistance(wordsDict);\n15\n * int param_1 = obj->shortest(word1,word2);\n16\n */"}
