{"title":"379. Design Phone Directory","description":"Design a phone directory that initially has maxNumbers empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.\n\nImplement the PhoneDirectory class:\n\nPhoneDirectory(int maxNumbers) Initializes the phone directory with the number of available slots maxNumbers.\nint get() Provides a number that is not assigned to anyone. Returns -1 if no number is available.\nbool check(int number) Returns true if the slot number is available and false otherwise.\nvoid release(int number) Recycles or releases the slot number.\n\n \n\nExample 1:\n\nInput\n[\"PhoneDirectory\", \"get\", \"get\", \"check\", \"get\", \"check\", \"release\", \"check\"]\n[[3], [], [], [2], [], [2], [2], [2]]\nOutput\n[null, 0, 1, true, 2, false, null, true]\n\nExplanation\nPhoneDirectory phoneDirectory = new PhoneDirectory(3);\nphoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.\nphoneDirectory.get();      // Assume it returns 1.\nphoneDirectory.check(2);   // The number 2 is available, so return true.\nphoneDirectory.get();      // It returns 2, the only number that is left.\nphoneDirectory.check(2);   // The number 2 is no longer available, so return false.\nphoneDirectory.release(2); // Release number 2 back to the pool.\nphoneDirectory.check(2);   // Number 2 is available again, return true.\n\n\n \n\nConstraints:\n\n1 <= maxNumbers <= 104\n0 <= number < maxNumbers\nAt most 2 * 104 calls will be made to get, check, and release.","functionSig":"1\nclass PhoneDirectory {\n2\npublic:\n3\n    PhoneDirectory(int maxNumbers) {\n4\n        \n5\n    }\n6\n    \n7\n    int get() {\n8\n        \n9\n    }\n10\n    \n11\n    bool check(int number) {\n12\n        \n13\n    }\n14\n    \n15\n    void release(int number) {\n16\n        \n17\n    }\n18\n};\n19\n​\n20\n/**\n21\n * Your PhoneDirectory object will be instantiated and called as such:\n22\n * PhoneDirectory* obj = new PhoneDirectory(maxNumbers);\n23\n * int param_1 = obj->get();\n24\n * bool param_2 = obj->check(number);\n25\n * obj->release(number);\n26\n */"}
