{"title":"1157. Online Majority Element In Subarray","description":"Design a data structure that efficiently finds the majority element of a given subarray.\n\nThe majority element of a subarray is an element that occurs threshold times or more in the subarray.\n\nImplementing the MajorityChecker class:\n\nMajorityChecker(int[] arr) Initializes the instance of the class with the given array arr.\nint query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.\n\n \n\nExample 1:\n\nInput\n[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\nOutput\n[null, 1, -1, 2]\n\nExplanation\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2\n\n\n \n\nConstraints:\n\n1 <= arr.length <= 2 * 104\n1 <= arr[i] <= 2 * 104\n0 <= left <= right < arr.length\nthreshold <= right - left + 1\n2 * threshold > right - left + 1\nAt most 104 calls will be made to query.","functionSig":"1\nclass MajorityChecker {\n2\npublic:\n3\n    MajorityChecker(vector<int>& arr) {\n4\n        \n5\n    }\n6\n    \n7\n    int query(int left, int right, int threshold) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your MajorityChecker object will be instantiated and called as such:\n14\n * MajorityChecker* obj = new MajorityChecker(arr);\n15\n * int param_1 = obj->query(left,right,threshold);\n16\n */"}
