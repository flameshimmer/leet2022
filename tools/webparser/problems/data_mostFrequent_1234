{"title":"1602. Find Nearest Right Node in Binary Tree","description":"Given the root of a binary tree and a node u in the tree, return the nearest node on the same level that is to the right of u, or return null if u is the rightmost node in its level.\n\n \n\nExample 1:\n\nInput: root = [1,2,3,null,4,5,6], u = 4\nOutput: 5\nExplanation: The nearest node on the same level to the right of node 4 is node 5.\n\n\nExample 2:\n\nInput: root = [3,null,4,2], u = 2\nOutput: null\nExplanation: There are no nodes to the right of 2.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n1 <= Node.val <= 105\nAll values in the tree are distinct.\nu is a node in the binary tree rooted at root.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    TreeNode* findNearestRightNode(TreeNode* root, TreeNode* u) {\n15\n        \n16\n    }\n17\n};"}
