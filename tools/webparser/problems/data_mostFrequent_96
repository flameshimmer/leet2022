{"title":"362. Design Hit Counter","description":"Design a hit counter which counts the number of hits received in the past 5 minutes (i.e., the past 300 seconds).\n\nYour system should accept a timestamp parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., timestamp is monotonically increasing). Several hits may arrive roughly at the same time.\n\nImplement the HitCounter class:\n\nHitCounter() Initializes the object of the hit counter system.\nvoid hit(int timestamp) Records a hit that happened at timestamp (in seconds). Several hits may happen at the same timestamp.\nint getHits(int timestamp) Returns the number of hits in the past 5 minutes from timestamp (i.e., the past 300 seconds).\n\n \n\nExample 1:\n\nInput\n[\"HitCounter\", \"hit\", \"hit\", \"hit\", \"getHits\", \"hit\", \"getHits\", \"getHits\"]\n[[], [1], [2], [3], [4], [300], [300], [301]]\nOutput\n[null, null, null, null, 3, null, 4, 3]\n\nExplanation\nHitCounter hitCounter = new HitCounter();\nhitCounter.hit(1);       // hit at timestamp 1.\nhitCounter.hit(2);       // hit at timestamp 2.\nhitCounter.hit(3);       // hit at timestamp 3.\nhitCounter.getHits(4);   // get hits at timestamp 4, return 3.\nhitCounter.hit(300);     // hit at timestamp 300.\nhitCounter.getHits(300); // get hits at timestamp 300, return 4.\nhitCounter.getHits(301); // get hits at timestamp 301, return 3.\n\n\n \n\nConstraints:\n\n1 <= timestamp <= 2 * 109\nAll the calls are being made to the system in chronological order (i.e., timestamp is monotonically increasing).\nAt most 300 calls will be made to hit and getHits.\n\n \n\nFollow up: What if the number of hits per second could be huge? Does your design scale?","functionSig":"1\nclass HitCounter {\n2\npublic:\n3\n    HitCounter() {\n4\n        \n5\n    }\n6\n    \n7\n    void hit(int timestamp) {\n8\n        \n9\n    }\n10\n    \n11\n    int getHits(int timestamp) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your HitCounter object will be instantiated and called as such:\n18\n * HitCounter* obj = new HitCounter();\n19\n * obj->hit(timestamp);\n20\n * int param_2 = obj->getHits(timestamp);\n21\n */"}
