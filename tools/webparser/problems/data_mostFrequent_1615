{"title":"729. My Calendar I","description":"You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\n\nA double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\n\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\n\nImplement the MyCalendar class:\n\nMyCalendar() Initializes the calendar object.\nboolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.\n\n \n\nExample 1:\n\nInput\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]\nOutput\n[null, true, false, true]\n\nExplanation\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.\n\n \n\nConstraints:\n\n0 <= start < end <= 109\nAt most 1000 calls will be made to book.","functionSig":"1\nclass MyCalendar {\n2\npublic:\n3\n    MyCalendar() {\n4\n        \n5\n    }\n6\n    \n7\n    bool book(int start, int end) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your MyCalendar object will be instantiated and called as such:\n14\n * MyCalendar* obj = new MyCalendar();\n15\n * bool param_1 = obj->book(start,end);\n16\n */"}
