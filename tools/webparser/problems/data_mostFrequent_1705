{"title":"536. Construct Binary Tree from String","description":"You need to construct a binary tree from a string consisting of parenthesis and integers.\n\nThe whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.\n\nYou always start to construct the left child node of the parent first if it exists.\n\n \n\nExample 1:\n\nInput: s = \"4(2(3)(1))(6(5))\"\nOutput: [4,2,6,3,1,5]\n\n\nExample 2:\n\nInput: s = \"4(2(3)(1))(6(5)(7))\"\nOutput: [4,2,6,3,1,5,7]\n\n\nExample 3:\n\nInput: s = \"-4(2(3)(1))(6(5)(7))\"\nOutput: [-4,2,6,3,1,5,7]\n\n\n \n\nConstraints:\n\n0 <= s.length <= 3 * 104\ns consists of digits, '(', ')', and '-' only.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    TreeNode* str2tree(string s) {\n15\n        \n16\n    }\n17\n};"}
