{"title":"170. Two Sum III - Data structure design","description":"Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.\n\nImplement the TwoSum class:\n\nTwoSum() Initializes the TwoSum object, with an empty array initially.\nvoid add(int number) Adds number to the data structure.\nboolean find(int value) Returns true if there exists any pair of numbers whose sum is equal to value, otherwise, it returns false.\n\n \n\nExample 1:\n\nInput\n[\"TwoSum\", \"add\", \"add\", \"add\", \"find\", \"find\"]\n[[], [1], [3], [5], [4], [7]]\nOutput\n[null, null, null, null, true, false]\n\nExplanation\nTwoSum twoSum = new TwoSum();\ntwoSum.add(1);   // [] --> [1]\ntwoSum.add(3);   // [1] --> [1,3]\ntwoSum.add(5);   // [1,3] --> [1,3,5]\ntwoSum.find(4);  // 1 + 3 = 4, return true\ntwoSum.find(7);  // No two integers sum up to 7, return false\n\n\n \n\nConstraints:\n\n-105 <= number <= 105\n-231 <= value <= 231 - 1\nAt most 104 calls will be made to add and find.","functionSig":"1\nclass TwoSum {\n2\npublic:\n3\n    TwoSum() {\n4\n        \n5\n    }\n6\n    \n7\n    void add(int number) {\n8\n        \n9\n    }\n10\n    \n11\n    bool find(int value) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your TwoSum object will be instantiated and called as such:\n18\n * TwoSum* obj = new TwoSum();\n19\n * obj->add(number);\n20\n * bool param_2 = obj->find(value);\n21\n */"}
