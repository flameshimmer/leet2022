{"title":"335. Self Crossing","description":"You are given an array of integers distance.\n\nYou start at point (0,0) on an X-Y plane and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n\nReturn true if your path crosses itself, and false if it does not.\n\n \n\nExample 1:\n\nInput: distance = [2,1,1,2]\nOutput: true\n\n\nExample 2:\n\nInput: distance = [1,2,3,4]\nOutput: false\n\n\nExample 3:\n\nInput: distance = [1,1,1,1]\nOutput: true\n\n\n \n\nConstraints:\n\n1 <= distance.length <= 105\n1 <= distance[i] <= 105","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    bool isSelfCrossing(vector<int>& distance) {\n4\n        \n5\n    }\n6\n};"}
