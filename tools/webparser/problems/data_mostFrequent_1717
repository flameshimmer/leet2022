{"title":"148. Sort List","description":"Given the head of a linked list, return the list after sorting it in ascending order.\n\n \n\nExample 1:\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\n\nExample 2:\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\n\nExample 3:\n\nInput: head = []\nOutput: []\n\n\n \n\nConstraints:\n\nThe number of nodes in the list is in the range [0, 5 * 104].\n-105 <= Node.val <= 105\n\n \n\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\nclass Solution {\n12\npublic:\n13\n    ListNode* sortList(ListNode* head) {\n14\n        \n15\n    }\n16\n};"}
