{"title":"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers","description":"A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.\n\nGiven a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.\n\n \n\nExample 1:\n\nInput: n = \"32\"\nOutput: 3\nExplanation: 10 + 11 + 11 = 32\n\n\nExample 2:\n\nInput: n = \"82734\"\nOutput: 8\n\n\nExample 3:\n\nInput: n = \"27346209830709182346\"\nOutput: 9\n\n\n \n\nConstraints:\n\n1 <= n.length <= 105\nn consists of only digits.\nn does not contain any leading zeros and represents a positive integer.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int minPartitions(string n) {\n4\n        \n5\n    }\n6\n};"}
