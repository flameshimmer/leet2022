{"title":"398. Random Pick Index","description":"Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\n\nImplement the Solution class:\n\nSolution(int[] nums) Initializes the object with the array nums.\nint pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n \n\nExample 1:\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\n\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 2 * 104\n-231 <= nums[i] <= 231 - 1\ntarget is an integer from nums.\nAt most 104 calls will be made to pick.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    Solution(vector<int>& nums) {\n4\n        \n5\n    }\n6\n    \n7\n    int pick(int target) {\n8\n        \n9\n    }\n10\n};\n11\n​\n12\n/**\n13\n * Your Solution object will be instantiated and called as such:\n14\n * Solution* obj = new Solution(nums);\n15\n * int param_1 = obj->pick(target);\n16\n */"}
