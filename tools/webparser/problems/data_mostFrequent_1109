{"title":"1166. Design File System","description":"You are asked to design a file system that allows you to create new paths and associate them with different values.\n\nThe format of a path is one or more concatenated strings of the form: / followed by one or more lowercase English letters. For example, \"/leetcode\" and \"/leetcode/problems\" are valid paths while an empty string \"\" and \"/\" are not.\n\nImplement the FileSystem class:\n\nbool createPath(string path, int value) Creates a new path and associates a value to it if possible and returns true. Returns false if the path already exists or its parent path doesn't exist.\nint get(string path) Returns the value associated with path or returns -1 if the path doesn't exist.\n\n \n\nExample 1:\n\nInput: \n[\"FileSystem\",\"createPath\",\"get\"]\n[[],[\"/a\",1],[\"/a\"]]\nOutput: \n[null,true,1]\nExplanation: \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath(\"/a\", 1); // return true\nfileSystem.get(\"/a\"); // return 1\n\n\nExample 2:\n\nInput: \n[\"FileSystem\",\"createPath\",\"createPath\",\"get\",\"createPath\",\"get\"]\n[[],[\"/leet\",1],[\"/leet/code\",2],[\"/leet/code\"],[\"/c/d\",1],[\"/c\"]]\nOutput: \n[null,true,true,2,false,-1]\nExplanation: \nFileSystem fileSystem = new FileSystem();\n\nfileSystem.createPath(\"/leet\", 1); // return true\nfileSystem.createPath(\"/leet/code\", 2); // return true\nfileSystem.get(\"/leet/code\"); // return 2\nfileSystem.createPath(\"/c/d\", 1); // return false because the parent path \"/c\" doesn't exist.\nfileSystem.get(\"/c\"); // return -1 because this path doesn't exist.\n\n\n \n\nConstraints:\n\nThe number of calls to the two functions is less than or equal to 104 in total.\n2 <= path.length <= 100\n1 <= value <= 109","functionSig":"1\nclass FileSystem {\n2\npublic:\n3\n    FileSystem() {\n4\n        \n5\n    }\n6\n    \n7\n    bool createPath(string path, int value) {\n8\n        \n9\n    }\n10\n    \n11\n    int get(string path) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your FileSystem object will be instantiated and called as such:\n18\n * FileSystem* obj = new FileSystem();\n19\n * bool param_1 = obj->createPath(path,value);\n20\n * int param_2 = obj->get(path);\n21\n */"}
