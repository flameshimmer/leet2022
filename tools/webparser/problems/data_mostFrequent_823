{"title":"1804. Implement Trie II (Prefix Tree)","description":"A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n\nTrie() Initializes the trie object.\nvoid insert(String word) Inserts the string word into the trie.\nint countWordsEqualTo(String word) Returns the number of instances of the string word in the trie.\nint countWordsStartingWith(String prefix) Returns the number of strings in the trie that have the string prefix as a prefix.\nvoid erase(String word) Erases the string word from the trie.\n\n \n\nExample 1:\n\nInput\n[\"Trie\", \"insert\", \"insert\", \"countWordsEqualTo\", \"countWordsStartingWith\", \"erase\", \"countWordsEqualTo\", \"countWordsStartingWith\", \"erase\", \"countWordsStartingWith\"]\n[[], [\"apple\"], [\"apple\"], [\"apple\"], [\"app\"], [\"apple\"], [\"apple\"], [\"app\"], [\"apple\"], [\"app\"]]\nOutput\n[null, null, null, 2, 2, null, 1, 1, null, 0]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");               // Inserts \"apple\".\ntrie.insert(\"apple\");               // Inserts another \"apple\".\ntrie.countWordsEqualTo(\"apple\");    // There are two instances of \"apple\" so return 2.\ntrie.countWordsStartingWith(\"app\"); // \"app\" is a prefix of \"apple\" so return 2.\ntrie.erase(\"apple\");                // Erases one \"apple\".\ntrie.countWordsEqualTo(\"apple\");    // Now there is only one instance of \"apple\" so return 1.\ntrie.countWordsStartingWith(\"app\"); // return 1\ntrie.erase(\"apple\");                // Erases \"apple\". Now the trie is empty.\ntrie.countWordsStartingWith(\"app\"); // return 0\n\n\n \n\nConstraints:\n\n1 <= word.length, prefix.length <= 2000\nword and prefix consist only of lowercase English letters.\nAt most 3 * 104 calls in total will be made to insert, countWordsEqualTo, countWordsStartingWith, and erase.\nIt is guaranteed that for any function call to erase, the string word will exist in the trie.","functionSig":"1\nclass Trie {\n2\npublic:\n3\n    Trie() {\n4\n        \n5\n    }\n6\n    \n7\n    void insert(string word) {\n8\n        \n9\n    }\n10\n    \n11\n    int countWordsEqualTo(string word) {\n12\n        \n13\n    }\n14\n    \n15\n    int countWordsStartingWith(string prefix) {\n16\n        \n17\n    }\n18\n    \n19\n    void erase(string word) {\n20\n        \n21\n    }\n22\n};\n23\n​\n24\n/**\n25\n * Your Trie object will be instantiated and called as such:\n26\n * Trie* obj = new Trie();\n27\n * obj->insert(word);\n28\n * int param_2 = obj->countWordsEqualTo(word);\n29\n * int param_3 = obj->countWordsStartingWith(prefix);\n30\n * obj->erase(word);\n31\n */"}
