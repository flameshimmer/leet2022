{"title":"297. Serialize and Deserialize Binary Tree","description":"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n \n\nExample 1:\n\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n\n\nExample 2:\n\nInput: root = []\nOutput: []\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-1000 <= Node.val <= 1000","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n8\n * };\n9\n */\n10\nclass Codec {\n11\npublic:\n12\n​\n13\n    // Encodes a tree to a single string.\n14\n    string serialize(TreeNode* root) {\n15\n        \n16\n    }\n17\n​\n18\n    // Decodes your encoded data to tree.\n19\n    TreeNode* deserialize(string data) {\n20\n        \n21\n    }\n22\n};\n23\n​\n24\n// Your Codec object will be instantiated and called as such:\n25\n// Codec ser, deser;\n26\n// TreeNode* ans = deser.deserialize(ser.serialize(root));"}
