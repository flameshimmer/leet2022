{"title":"232. Implement Queue using Stacks","description":"Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n\nImplement the MyQueue class:\n\nvoid push(int x) Pushes element x to the back of the queue.\nint pop() Removes the element from the front of the queue and returns it.\nint peek() Returns the element at the front of the queue.\nboolean empty() Returns true if the queue is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n \n\nExample 1:\n\nInput\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n\n\n \n\nConstraints:\n\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, peek, and empty.\nAll the calls to pop and peek are valid.\n\n \n\nFollow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.","functionSig":"1\nclass MyQueue {\n2\npublic:\n3\n    MyQueue() {\n4\n        \n5\n    }\n6\n    \n7\n    void push(int x) {\n8\n        \n9\n    }\n10\n    \n11\n    int pop() {\n12\n        \n13\n    }\n14\n    \n15\n    int peek() {\n16\n        \n17\n    }\n18\n    \n19\n    bool empty() {\n20\n        \n21\n    }\n22\n};\n23\n​\n24\n/**\n25\n * Your MyQueue object will be instantiated and called as such:\n26\n * MyQueue* obj = new MyQueue();\n27\n * obj->push(x);\n28\n * int param_2 = obj->pop();\n29\n * int param_3 = obj->peek();\n30\n * bool param_4 = obj->empty();\n31\n */"}
