{"title":"604. Design Compressed String Iterator","description":"Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\n\nImplement the StringIterator class:\n\nnext() Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.\nhasNext() Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns false.\n\n \n\nExample 1:\n\nInput\n[\"StringIterator\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"L1e2t1C1o1d1e1\"], [], [], [], [], [], [], [], [], []]\nOutput\n[null, \"L\", \"e\", \"e\", \"t\", \"C\", \"o\", true, \"d\", true]\n\nExplanation\nStringIterator stringIterator = new StringIterator(\"L1e2t1C1o1d1e1\");\nstringIterator.next(); // return \"L\"\nstringIterator.next(); // return \"e\"\nstringIterator.next(); // return \"e\"\nstringIterator.next(); // return \"t\"\nstringIterator.next(); // return \"C\"\nstringIterator.next(); // return \"o\"\nstringIterator.hasNext(); // return True\nstringIterator.next(); // return \"d\"\nstringIterator.hasNext(); // return True\n\n\n \n\nConstraints:\n\n1 <= compressedString.length <= 1000\ncompressedString consists of lower-case an upper-case English letters and digits.\nThe number of a single character repetitions in compressedString is in the range [1, 10^9]\nAt most 100 calls will be made to next and hasNext.","functionSig":"1\nclass StringIterator {\n2\npublic:\n3\n    StringIterator(string compressedString) {\n4\n        \n5\n    }\n6\n    \n7\n    char next() {\n8\n        \n9\n    }\n10\n    \n11\n    bool hasNext() {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your StringIterator object will be instantiated and called as such:\n18\n * StringIterator* obj = new StringIterator(compressedString);\n19\n * char param_1 = obj->next();\n20\n * bool param_2 = obj->hasNext();\n21\n */"}
