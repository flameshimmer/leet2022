{"title":"677. Map Sum Pairs","description":"Design a map that allows you to do the following:\n\nMaps a string key to a given value.\nReturns the sum of the values that have a key with a prefix equal to a given string.\n\nImplement the MapSum class:\n\nMapSum() Initializes the MapSum object.\nvoid insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\nint sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.\n\n \n\nExample 1:\n\nInput\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\nOutput\n[null, null, 3, null, 5]\n\nExplanation\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n \n\nConstraints:\n\n1 <= key.length, prefix.length <= 50\nkey and prefix consist of only lowercase English letters.\n1 <= val <= 1000\nAt most 50 calls will be made to insert and sum.","functionSig":"1\nclass MapSum {\n2\npublic:\n3\n    MapSum() {\n4\n        \n5\n    }\n6\n    \n7\n    void insert(string key, int val) {\n8\n        \n9\n    }\n10\n    \n11\n    int sum(string prefix) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your MapSum object will be instantiated and called as such:\n18\n * MapSum* obj = new MapSum();\n19\n * obj->insert(key,val);\n20\n * int param_2 = obj->sum(prefix);\n21\n */"}
