{"title":"702. Search in a Sorted Array of Unknown Size","description":"This is an interactive problem.\n\nYou have a sorted array of unique elements and an unknown size. You do not have an access to the array but you can use the ArrayReader interface to access it. You can call ArrayReader.get(i) that:\n\nreturns the value at the ith index (0-indexed) of the secret array (i.e., secret[i]), or\nreturns 231 - 1 if the i is out of the boundary of the array.\n\nYou are also given an integer target.\n\nReturn the index k of the hidden array where secret[k] == target or return -1 otherwise.\n\nYou must write an algorithm with O(log n) runtime complexity.\n\n \n\nExample 1:\n\nInput: secret = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in secret and its index is 4.\n\n\nExample 2:\n\nInput: secret = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in secret so return -1.\n\n\n \n\nConstraints:\n\n1 <= secret.length <= 104\n-104 <= secret[i], target <= 104\nsecret is sorted in a strictly increasing order.","functionSig":"1\n/**\n2\n * // This is the ArrayReader's API interface.\n3\n * // You should not implement it, or speculate about its implementation\n4\n * class ArrayReader {\n5\n *   public:\n6\n *     int get(int index);\n7\n * };\n8\n */\n9\n​\n10\nclass Solution {\n11\npublic:\n12\n    int search(const ArrayReader& reader, int target) {\n13\n        \n14\n    }\n15\n};"}
