{"title":"2123. Minimum Operations to Remove Adjacent Ones in Matrix","description":"You are given a 0-indexed binary matrix grid. In one operation, you can flip any 1 in grid to be 0.\n\nA binary matrix is well-isolated if there is no 1 in the matrix that is 4-directionally connected (i.e., horizontal and vertical) to another 1.\n\nReturn the minimum number of operations to make grid well-isolated.\n\n \n\nExample 1:\n\nInput: grid = [[1,1,0],[0,1,1],[1,1,1]]\nOutput: 3\nExplanation: Use 3 operations to change grid[0][1], grid[1][2], and grid[2][1] to 0.\nAfter, no more 1's are 4-directionally connected and grid is well-isolated.\n\n\nExample 2:\n\nInput: grid = [[0,0,0],[0,0,0],[0,0,0]]\nOutput: 0\nExplanation: There are no 1's in grid and it is well-isolated.\nNo operations were done so return 0.\n\n\nExample 3:\n\nInput: grid = [[0,1],[1,0]]\nOutput: 0\nExplanation: None of the 1's are 4-directionally connected and grid is well-isolated.\nNo operations were done so return 0.\n\n\n \n\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 300\ngrid[i][j] is either 0 or 1.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int minimumOperations(vector<vector<int>>& grid) {\n4\n        \n5\n    }\n6\n};"}
