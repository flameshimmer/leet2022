{"title":"1008. Construct Binary Search Tree from Preorder Traversal","description":"Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.\n\nIt is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.\n\nA binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.\n\nA preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.\n\n \n\nExample 1:\n\nInput: preorder = [8,5,1,7,10,12]\nOutput: [8,5,10,1,7,null,12]\n\n\nExample 2:\n\nInput: preorder = [1,3]\nOutput: [1,null,3]\n\n\n \n\nConstraints:\n\n1 <= preorder.length <= 100\n1 <= preorder[i] <= 1000\nAll the values of preorder are unique.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n15\n        \n16\n    }\n17\n};"}
