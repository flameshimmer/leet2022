{"title":"1429. First Unique Number","description":"You have a queue of integers, you need to retrieve the first unique integer in the queue.\n\nImplement the FirstUnique class:\n\nFirstUnique(int[] nums) Initializes the object with the numbers in the queue.\nint showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.\nvoid add(int value) insert value to the queue.\n\n \n\nExample 1:\n\nInput: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[2,3,5]],[],[5],[],[2],[],[3],[]]\nOutput: \n[null,2,null,2,null,3,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([2,3,5]);\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(5);            // the queue is now [2,3,5,5]\nfirstUnique.showFirstUnique(); // return 2\nfirstUnique.add(2);            // the queue is now [2,3,5,5,2]\nfirstUnique.showFirstUnique(); // return 3\nfirstUnique.add(3);            // the queue is now [2,3,5,5,2,3]\nfirstUnique.showFirstUnique(); // return -1\n\n\nExample 2:\n\nInput: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"add\",\"add\",\"add\",\"add\",\"showFirstUnique\"]\n[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]\nOutput: \n[null,-1,null,null,null,null,null,17]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);\nfirstUnique.showFirstUnique(); // return -1\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]\nfirstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]\nfirstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]\nfirstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]\nfirstUnique.showFirstUnique(); // return 17\n\n\nExample 3:\n\nInput: \n[\"FirstUnique\",\"showFirstUnique\",\"add\",\"showFirstUnique\"]\n[[[809]],[],[809],[]]\nOutput: \n[null,809,null,-1]\nExplanation: \nFirstUnique firstUnique = new FirstUnique([809]);\nfirstUnique.showFirstUnique(); // return 809\nfirstUnique.add(809);          // the queue is now [809,809]\nfirstUnique.showFirstUnique(); // return -1\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^8\n1 <= value <= 10^8\nAt most 50000 calls will be made to showFirstUnique and add.","functionSig":"1\nclass FirstUnique {\n2\npublic:\n3\n    FirstUnique(vector<int>& nums) {\n4\n        \n5\n    }\n6\n    \n7\n    int showFirstUnique() {\n8\n        \n9\n    }\n10\n    \n11\n    void add(int value) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your FirstUnique object will be instantiated and called as such:\n18\n * FirstUnique* obj = new FirstUnique(nums);\n19\n * int param_1 = obj->showFirstUnique();\n20\n * obj->add(value);\n21\n */"}
