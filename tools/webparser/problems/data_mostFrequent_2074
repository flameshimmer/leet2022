{"title":"106. Construct Binary Tree from Inorder and Postorder Traversal","description":"Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n\n \n\nExample 1:\n\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n\n\nExample 2:\n\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]\n\n\n \n\nConstraints:\n\n1 <= inorder.length <= 3000\npostorder.length == inorder.length\n-3000 <= inorder[i], postorder[i] <= 3000\ninorder and postorder consist of unique values.\nEach value of postorder also appears in inorder.\ninorder is guaranteed to be the inorder traversal of the tree.\npostorder is guaranteed to be the postorder traversal of the tree.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n15\n        \n16\n    }\n17\n};"}
