{"title":"1485. Clone Binary Tree With Random Pointer","description":"A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.\n\nReturn a deep copy of the tree.\n\nThe tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of [val, random_index] where:\n\nval: an integer representing Node.val\nrandom_index: the index of the node (in the input) where the random pointer points to, or null if it does not point to any node.\n\nYou will be given the tree in class Node and you should return the cloned tree in class NodeCopy. NodeCopy class is just a clone of Node class with the same attributes and constructors.\n\n \n\nExample 1:\n\nInput: root = [[1,null],null,[4,3],[7,0]]\nOutput: [[1,null],null,[4,3],[7,0]]\nExplanation: The original binary tree is [1,null,4,7].\nThe random pointer of node one is null, so it is represented as [1, null].\nThe random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.\nThe random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree.\n\n\nExample 2:\n\nInput: root = [[1,4],null,[1,0],null,[1,5],[1,5]]\nOutput: [[1,4],null,[1,0],null,[1,5],[1,5]]\nExplanation: The random pointer of a node can be the node itself.\n\n\nExample 3:\n\nInput: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\nOutput: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 1000].\n1 <= Node.val <= 106","functionSig":"1\n/**\n2\n * Definition for a Node.\n3\n * struct Node {\n4\n *     int val;\n5\n *     Node *left;\n6\n *     Node *right;\n7\n *     Node *random;\n8\n *     Node() : val(0), left(nullptr), right(nullptr), random(nullptr) {}\n9\n *     Node(int x) : val(x), left(nullptr), right(nullptr), random(nullptr) {}\n10\n *     Node(int x, Node *left, Node *right, Node *random) : val(x), left(left), right(right), random(random) {}\n11\n * };\n12\n */\n13\n​\n14\nclass Solution {\n15\npublic:\n16\n    NodeCopy* copyRandomBinaryTree(Node* root) {\n17\n        \n18\n    }\n19\n};"}
