{"title":"1146. Snapshot Array","description":"Implement a SnapshotArray that supports the following interface:\n\nSnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.\nvoid set(index, val) sets the element at the given index to be equal to val.\nint snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.\nint get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id\n\n \n\nExample 1:\n\nInput: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]\nOutput: [null,null,0,null,5]\nExplanation: \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5\n\n \n\nConstraints:\n\n1 <= length <= 50000\nAt most 50000 calls will be made to set, snap, and get.\n0 <= index < length\n0 <= snap_id < (the total number of times we call snap())\n0 <= val <= 10^9","functionSig":"1\nclass SnapshotArray {\n2\npublic:\n3\n    SnapshotArray(int length) {\n4\n        \n5\n    }\n6\n    \n7\n    void set(int index, int val) {\n8\n        \n9\n    }\n10\n    \n11\n    int snap() {\n12\n        \n13\n    }\n14\n    \n15\n    int get(int index, int snap_id) {\n16\n        \n17\n    }\n18\n};\n19\n​\n20\n/**\n21\n * Your SnapshotArray object will be instantiated and called as such:\n22\n * SnapshotArray* obj = new SnapshotArray(length);\n23\n * obj->set(index,val);\n24\n * int param_2 = obj->snap();\n25\n * int param_3 = obj->get(index,snap_id);\n26\n */"}
