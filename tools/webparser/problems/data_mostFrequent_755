{"title":"742. Closest Leaf in a Binary Tree","description":"Given the root of a binary tree where every node has a unique value and a target integer k, return the value of the nearest leaf node to the target k in the tree.\n\nNearest to a leaf means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.\n\n \n\nExample 1:\n\nInput: root = [1,3,2], k = 1\nOutput: 2\nExplanation: Either 2 or 3 is the nearest leaf node to the target of 1.\n\n\nExample 2:\n\nInput: root = [1], k = 1\nOutput: 1\nExplanation: The nearest leaf node is the root node itself.\n\n\nExample 3:\n\nInput: root = [1,2,3,4,null,null,null,5,null,6], k = 2\nOutput: 3\nExplanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.\n\n\n \n\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n1 <= Node.val <= 1000\nAll the values of the tree are unique.\nThere exist some node in the tree where Node.val == k.","functionSig":"1\n/**\n2\n * Definition for a binary tree node.\n3\n * struct TreeNode {\n4\n *     int val;\n5\n *     TreeNode *left;\n6\n *     TreeNode *right;\n7\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n8\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n9\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n10\n * };\n11\n */\n12\nclass Solution {\n13\npublic:\n14\n    int findClosestLeaf(TreeNode* root, int k) {\n15\n        \n16\n    }\n17\n};"}
