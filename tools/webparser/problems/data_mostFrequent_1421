{"title":"206. Reverse Linked List","description":"Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n \n\nExample 1:\n\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\n\nExample 2:\n\nInput: head = [1,2]\nOutput: [2,1]\n\n\nExample 3:\n\nInput: head = []\nOutput: []\n\n\n \n\nConstraints:\n\nThe number of nodes in the list is the range [0, 5000].\n-5000 <= Node.val <= 5000\n\n \n\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?","functionSig":"1\n/**\n2\n * Definition for singly-linked list.\n3\n * struct ListNode {\n4\n *     int val;\n5\n *     ListNode *next;\n6\n *     ListNode() : val(0), next(nullptr) {}\n7\n *     ListNode(int x) : val(x), next(nullptr) {}\n8\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n9\n * };\n10\n */\n11\nclass Solution {\n12\npublic:\n13\n    ListNode* reverseList(ListNode* head) {\n14\n        \n15\n    }\n16\n};"}
