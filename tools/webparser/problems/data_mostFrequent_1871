{"title":"535. Encode and Decode TinyURL","description":"Note: This is a companion problem to the System Design problem: Design TinyURL.\n\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\n\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n\nImplement the Solution class:\n\nSolution() Initializes the object of the system.\nString encode(String longUrl) Returns a tiny URL for the given longUrl.\nString decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.\n\n \n\nExample 1:\n\nInput: url = \"https://leetcode.com/problems/design-tinyurl\"\nOutput: \"https://leetcode.com/problems/design-tinyurl\"\n\nExplanation:\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after deconding it.\n\n\n \n\nConstraints:\n\n1 <= url.length <= 104\nurl is guranteed to be a valid URL.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n​\n4\n    // Encodes a URL to a shortened URL.\n5\n    string encode(string longUrl) {\n6\n        \n7\n    }\n8\n​\n9\n    // Decodes a shortened URL to its original URL.\n10\n    string decode(string shortUrl) {\n11\n        \n12\n    }\n13\n};\n14\n​\n15\n// Your Solution object will be instantiated and called as such:\n16\n// Solution solution;\n17\n// solution.decode(solution.encode(url));"}
