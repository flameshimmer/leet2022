{"title":"1788. Maximize the Beauty of the Garden","description":"There is a garden of n flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array flowers of size n and each flowers[i] represents the beauty of the ith flower.\n\nA garden is valid if it meets these conditions:\n\nThe garden has at least two flowers.\nThe first and the last flower of the garden have the same beauty value.\n\nAs the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden valid. The beauty of the garden is the sum of the beauty of all the remaining flowers.\n\nReturn the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.\n\n \n\nExample 1:\n\nInput: flowers = [1,2,3,1,2]\nOutput: 8\nExplanation: You can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8.\n\nExample 2:\n\nInput: flowers = [100,1,1,-3,1]\nOutput: 3\nExplanation: You can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3.\n\n\nExample 3:\n\nInput: flowers = [-1,-2,0,-1]\nOutput: -2\nExplanation: You can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2.\n\n\n \n\nConstraints:\n\n2 <= flowers.length <= 105\n-104 <= flowers[i] <= 104\nIt is possible to create a valid garden by removing some (possibly none) flowers.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int maximumBeauty(vector<int>& flowers) {\n4\n        \n5\n    }\n6\n};"}
