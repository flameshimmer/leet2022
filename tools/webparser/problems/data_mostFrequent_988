{"title":"666. Path Sum IV","description":"If the depth of a tree is smaller than 5, then this tree can be represented by an array of three-digit integers. For each integer in this array:\n\nThe hundreds digit represents the depth d of this node where 1 <= d <= 4.\nThe tens digit represents the position p of this node in the level it belongs to where 1 <= p <= 8. The position is the same as that in a full binary tree.\nThe units digit represents the value v of this node where 0 <= v <= 9.\n\nGiven an array of ascending three-digit integers nums representing a binary tree with a depth smaller than 5, return the sum of all paths from the root towards the leaves.\n\nIt is guaranteed that the given array represents a valid connected binary tree.\n\n \n\nExample 1:\n\nInput: nums = [113,215,221]\nOutput: 12\nExplanation: The tree that the list represents is shown.\nThe path sum is (3 + 5) + (3 + 1) = 12.\n\n\nExample 2:\n\nInput: nums = [113,221]\nOutput: 4\nExplanation: The tree that the list represents is shown. \nThe path sum is (3 + 1) = 4.\n\n\n \n\nConstraints:\n\n1 <= nums.length <= 15\n110 <= nums[i] <= 489\nnums represents a valid binary tree with depth less than 5.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int pathSum(vector<int>& nums) {\n4\n        \n5\n    }\n6\n};"}
