{"title":"331. Verify Preorder Serialization of a Binary Tree","description":"One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\n\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\n\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\n\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\n\nYou may assume that the input format is always valid.\n\nFor example, it could never contain two consecutive commas, such as \"1,,3\".\n\nNote: You are not allowed to reconstruct the tree.\n\n \n\nExample 1:\n\nInput: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true\n\n\nExample 2:\n\nInput: preorder = \"1,#\"\nOutput: false\n\n\nExample 3:\n\nInput: preorder = \"9,#,#,1\"\nOutput: false\n\n\n \n\nConstraints:\n\n1 <= preorder.length <= 104\npreorder consist of integers in the range [0, 100] and '#' separated by commas ','.","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    bool isValidSerialization(string preorder) {\n4\n        \n5\n    }\n6\n};"}
