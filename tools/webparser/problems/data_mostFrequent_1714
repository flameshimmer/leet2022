{"title":"211. Design Add and Search Words Data Structure","description":"Design a data structure that supports adding new words and finding if a string matches any previously added string.\n\nImplement the WordDictionary class:\n\nWordDictionary() Initializes the object.\nvoid addWord(word) Adds word to the data structure, it can be matched later.\nbool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n\n \n\nExample:\n\nInput\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n\n\n \n\nConstraints:\n\n1 <= word.length <= 25\nword in addWord consists of lowercase English letters.\nword in search consist of '.' or lowercase English letters.\nThere will be at most 3 dots in word for search queries.\nAt most 104 calls will be made to addWord and search.","functionSig":"1\nclass WordDictionary {\n2\npublic:\n3\n    WordDictionary() {\n4\n        \n5\n    }\n6\n    \n7\n    void addWord(string word) {\n8\n        \n9\n    }\n10\n    \n11\n    bool search(string word) {\n12\n        \n13\n    }\n14\n};\n15\n​\n16\n/**\n17\n * Your WordDictionary object will be instantiated and called as such:\n18\n * WordDictionary* obj = new WordDictionary();\n19\n * obj->addWord(word);\n20\n * bool param_2 = obj->search(word);\n21\n */"}
