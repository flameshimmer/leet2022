{"title":"385. Mini Parser","description":"Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\n\nEach element is either an integer or a list whose elements may also be integers or other lists.\n\n \n\nExample 1:\n\nInput: s = \"324\"\nOutput: 324\nExplanation: You should return a NestedInteger object which contains a single integer 324.\n\n\nExample 2:\n\nInput: s = \"[123,[456,[789]]]\"\nOutput: [123,[456,[789]]]\nExplanation: Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\n\n\n \n\nConstraints:\n\n1 <= s.length <= 5 * 104\ns consists of digits, square brackets \"[]\", negative sign '-', and commas ','.\ns is the serialization of valid NestedInteger.\nAll the values in the input are in the range [-106, 106].","functionSig":"1\n/**\n2\n * // This is the interface that allows for creating nested lists.\n3\n * // You should not implement it, or speculate about its implementation\n4\n * class NestedInteger {\n5\n *   public:\n6\n *     // Constructor initializes an empty nested list.\n7\n *     NestedInteger();\n8\n *\n9\n *     // Constructor initializes a single integer.\n10\n *     NestedInteger(int value);\n11\n *\n12\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n13\n *     bool isInteger() const;\n14\n *\n15\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n16\n *     // The result is undefined if this NestedInteger holds a nested list\n17\n *     int getInteger() const;\n18\n *\n19\n *     // Set this NestedInteger to hold a single integer.\n20\n *     void setInteger(int value);\n21\n *\n22\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n23\n *     void add(const NestedInteger &ni);\n24\n *\n25\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n26\n *     // The result is undefined if this NestedInteger holds a single integer\n27\n *     const vector<NestedInteger> &getList() const;\n28\n * };\n29\n */\n30\nclass Solution {\n31\npublic:\n32\n    NestedInteger deserialize(string s) {\n33\n        \n34\n    }\n35\n};"}
