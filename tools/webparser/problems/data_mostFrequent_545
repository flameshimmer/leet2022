{"title":"1135. Connecting Cities With Minimum Cost","description":"There are n cities labeled from 1 to n. You are given the integer n and an array connections where connections[i] = [xi, yi, costi] indicates that the cost of connecting city xi and city yi (bidirectional connection) is costi.\n\nReturn the minimum cost to connect all the n cities such that there is at least one path between each pair of cities. If it is impossible to connect all the n cities, return -1,\n\nThe cost is the sum of the connections' costs used.\n\n \n\nExample 1:\n\nInput: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]\nOutput: 6\nExplanation: Choosing any 2 edges will connect all cities so we choose the minimum 2.\n\n\nExample 2:\n\nInput: n = 4, connections = [[1,2,3],[3,4,4]]\nOutput: -1\nExplanation: There is no way to connect all cities even if all edges are used.\n\n\n \n\nConstraints:\n\n1 <= n <= 104\n1 <= connections.length <= 104\nconnections[i].length == 3\n1 <= xi, yi <= n\nxi != yi\n0 <= costi <= 105","functionSig":"1\nclass Solution {\n2\npublic:\n3\n    int minimumCost(int n, vector<vector<int>>& connections) {\n4\n        \n5\n    }\n6\n};"}
